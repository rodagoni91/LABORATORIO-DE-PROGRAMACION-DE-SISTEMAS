//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: null
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR null C:\\Users\\dany_\\Desktop\\sicXE.g 2020-11-25 21:28:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "null")]
[System.CLSCompliant(false)]
public partial class sicXEParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "DIR", "DOS", "INT", "NOMBRE", "NOTACION", "OPERACIONDIRECTIVA", "START", "TIPODIRECTIVA", "TRES_CUATRO", "UNO", "'+ '", "',X'", "'END'", "'\\n'"
	};
	public const int EOF=-1;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int DIR=4;
	public const int DOS=5;
	public const int INT=6;
	public const int NOMBRE=7;
	public const int NOTACION=8;
	public const int OPERACIONDIRECTIVA=9;
	public const int START=10;
	public const int TIPODIRECTIVA=11;
	public const int TRES_CUATRO=12;
	public const int UNO=13;

	#if ANTLR_DEBUG
	private static readonly bool[] decisionCanBacktrack =
		new bool[]
		{
			false, // invalid decision
			false, false, false, false, false, false, false, false, false, false, 
			false, false, false, false, false, false, false
		};
	#else
	private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public sicXEParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public sicXEParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return sicXEParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\dany_\\Desktop\\sicXE.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_programa() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_programa() {}
	// $ANTLR start "programa"
	// C:\\Users\\dany_\\Desktop\\sicXE.g:5:1: programa : inicio ( proposicion )* final ;
	[GrammarRule("programa")]
	private void programa()
	{
		EnterRule_programa();
		EnterRule("programa", 1);
		TraceIn("programa", 1);
		try { DebugEnterRule(GrammarFileName, "programa");
		DebugLocation(5, 37);
		try
		{
			// C:\\Users\\dany_\\Desktop\\sicXE.g:5:9: ( inicio ( proposicion )* final )
			DebugEnterAlt(1);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:5:11: inicio ( proposicion )* final
			{
			DebugLocation(5, 11);
			PushFollow(Follow._inicio_in_programa36);
			inicio();
			PopFollow();

			DebugLocation(5, 18);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:5:18: ( proposicion )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_1 = input.LA(1);

				if ((LA1_1==DOS||LA1_1==NOMBRE||(LA1_1>=TIPODIRECTIVA && LA1_1<=14)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:5:19: proposicion
					{
					DebugLocation(5, 19);
					PushFollow(Follow._proposicion_in_programa39);
					proposicion();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(5, 33);
			PushFollow(Follow._final_in_programa43);
			final();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("programa", 1);
			LeaveRule("programa", 1);
			LeaveRule_programa();
	    }
	 	DebugLocation(5, 37);
		} finally { DebugExitRule(GrammarFileName, "programa"); }
		return;

	}
	// $ANTLR end "programa"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_inicio() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_inicio() {}
	// $ANTLR start "inicio"
	// C:\\Users\\dany_\\Desktop\\sicXE.g:6:1: inicio : NOMBRE START DIR '\\n' ;
	[GrammarRule("inicio")]
	private void inicio()
	{
		EnterRule_inicio();
		EnterRule("inicio", 2);
		TraceIn("inicio", 2);
		try { DebugEnterRule(GrammarFileName, "inicio");
		DebugLocation(6, 29);
		try
		{
			// C:\\Users\\dany_\\Desktop\\sicXE.g:6:8: ( NOMBRE START DIR '\\n' )
			DebugEnterAlt(1);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:6:10: NOMBRE START DIR '\\n'
			{
			DebugLocation(6, 10);
			Match(input,NOMBRE,Follow._NOMBRE_in_inicio50); 
			DebugLocation(6, 17);
			Match(input,START,Follow._START_in_inicio52); 
			DebugLocation(6, 23);
			Match(input,DIR,Follow._DIR_in_inicio54); 
			DebugLocation(6, 26);
			Match(input,17,Follow._17_in_inicio55); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inicio", 2);
			LeaveRule("inicio", 2);
			LeaveRule_inicio();
	    }
	 	DebugLocation(6, 29);
		} finally { DebugExitRule(GrammarFileName, "inicio"); }
		return;

	}
	// $ANTLR end "inicio"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_proposicion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_proposicion() {}
	// $ANTLR start "proposicion"
	// C:\\Users\\dany_\\Desktop\\sicXE.g:7:1: proposicion : ( instruccion | directiva ) ( '\\n' )? ;
	[GrammarRule("proposicion")]
	private void proposicion()
	{
		EnterRule_proposicion();
		EnterRule("proposicion", 3);
		TraceIn("proposicion", 3);
		try { DebugEnterRule(GrammarFileName, "proposicion");
		DebugLocation(7, 1);
		try
		{
			// C:\\Users\\dany_\\Desktop\\sicXE.g:8:2: ( ( instruccion | directiva ) ( '\\n' )? )
			DebugEnterAlt(1);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:8:4: ( instruccion | directiva ) ( '\\n' )?
			{
			DebugLocation(8, 4);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:8:4: ( instruccion | directiva )
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			switch (input.LA(1))
			{
			case NOMBRE:
				{
				int LA2_2 = input.LA(2);

				if ((LA2_2==DOS||(LA2_2>=TRES_CUATRO && LA2_2<=14)))
				{
					alt2 = 1;
				}
				else if ((LA2_2==TIPODIRECTIVA))
				{
					alt2 = 2;
				}

				else
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case DOS:
			case TRES_CUATRO:
			case UNO:
			case 14:
				{
				alt2 = 1;
				}
				break;
			case TIPODIRECTIVA:
				{
				alt2 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:8:5: instruccion
				{
				DebugLocation(8, 5);
				PushFollow(Follow._instruccion_in_proposicion64);
				instruccion();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:8:17: directiva
				{
				DebugLocation(8, 17);
				PushFollow(Follow._directiva_in_proposicion66);
				directiva();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(8, 27);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:8:27: ( '\\n' )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_1 = input.LA(1);

			if ((LA3_1==17))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:8:27: '\\n'
				{
				DebugLocation(8, 27);
				Match(input,17,Follow._17_in_proposicion68); 

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("proposicion", 3);
			LeaveRule("proposicion", 3);
			LeaveRule_proposicion();
	    }
	 	DebugLocation(9, 1);
		} finally { DebugExitRule(GrammarFileName, "proposicion"); }
		return;

	}
	// $ANTLR end "proposicion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_instruccion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_instruccion() {}
	// $ANTLR start "instruccion"
	// C:\\Users\\dany_\\Desktop\\sicXE.g:10:1: instruccion : ( ( NOMBRE )? UNO ( NOTACION )? NOMBRE ( ',X' )? | ( NOMBRE )? DOS ( NOTACION )? NOMBRE ( ',X' )? | ( NOMBRE )? ( '+ ' )? TRES_CUATRO ( NOTACION )? NOMBRE ( ',X' )? );
	[GrammarRule("instruccion")]
	private void instruccion()
	{
		EnterRule_instruccion();
		EnterRule("instruccion", 4);
		TraceIn("instruccion", 4);
		try { DebugEnterRule(GrammarFileName, "instruccion");
		DebugLocation(10, 122);
		try
		{
			// C:\\Users\\dany_\\Desktop\\sicXE.g:11:2: ( ( NOMBRE )? UNO ( NOTACION )? NOMBRE ( ',X' )? | ( NOMBRE )? DOS ( NOTACION )? NOMBRE ( ',X' )? | ( NOMBRE )? ( '+ ' )? TRES_CUATRO ( NOTACION )? NOMBRE ( ',X' )? )
			int alt14=3;
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			switch (input.LA(1))
			{
			case NOMBRE:
				{
				switch (input.LA(2))
				{
				case UNO:
					{
					alt14 = 1;
					}
					break;
				case DOS:
					{
					alt14 = 2;
					}
					break;
				case TRES_CUATRO:
				case 14:
					{
					alt14 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case UNO:
				{
				alt14 = 1;
				}
				break;
			case DOS:
				{
				alt14 = 2;
				}
				break;
			case TRES_CUATRO:
			case 14:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:4: ( NOMBRE )? UNO ( NOTACION )? NOMBRE ( ',X' )?
				{
				DebugLocation(11, 4);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:4: ( NOMBRE )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_1 = input.LA(1);

				if ((LA4_1==NOMBRE))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:4: NOMBRE
					{
					DebugLocation(11, 4);
					Match(input,NOMBRE,Follow._NOMBRE_in_instruccion79); 

					}
					break;

				}
				} finally { DebugExitSubRule(4); }

				DebugLocation(11, 12);
				Match(input,UNO,Follow._UNO_in_instruccion82); 
				DebugLocation(11, 16);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:16: ( NOTACION )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_1 = input.LA(1);

				if ((LA5_1==NOTACION))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:16: NOTACION
					{
					DebugLocation(11, 16);
					Match(input,NOTACION,Follow._NOTACION_in_instruccion84); 

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(11, 26);
				Match(input,NOMBRE,Follow._NOMBRE_in_instruccion87); 
				DebugLocation(11, 32);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:32: ( ',X' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_1 = input.LA(1);

				if ((LA6_1==15))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:32: ',X'
					{
					DebugLocation(11, 32);
					Match(input,15,Follow._15_in_instruccion88); 

					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:39: ( NOMBRE )? DOS ( NOTACION )? NOMBRE ( ',X' )?
				{
				DebugLocation(11, 39);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:39: ( NOMBRE )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_1 = input.LA(1);

				if ((LA7_1==NOMBRE))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:39: NOMBRE
					{
					DebugLocation(11, 39);
					Match(input,NOMBRE,Follow._NOMBRE_in_instruccion92); 

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(11, 47);
				Match(input,DOS,Follow._DOS_in_instruccion95); 
				DebugLocation(11, 51);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:51: ( NOTACION )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_1 = input.LA(1);

				if ((LA8_1==NOTACION))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:51: NOTACION
					{
					DebugLocation(11, 51);
					Match(input,NOTACION,Follow._NOTACION_in_instruccion97); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(11, 61);
				Match(input,NOMBRE,Follow._NOMBRE_in_instruccion100); 
				DebugLocation(11, 67);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:67: ( ',X' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
				int LA9_1 = input.LA(1);

				if ((LA9_1==15))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:67: ',X'
					{
					DebugLocation(11, 67);
					Match(input,15,Follow._15_in_instruccion101); 

					}
					break;

				}
				} finally { DebugExitSubRule(9); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:75: ( NOMBRE )? ( '+ ' )? TRES_CUATRO ( NOTACION )? NOMBRE ( ',X' )?
				{
				DebugLocation(11, 75);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:75: ( NOMBRE )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, decisionCanBacktrack[10]);
				int LA10_1 = input.LA(1);

				if ((LA10_1==NOMBRE))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:75: NOMBRE
					{
					DebugLocation(11, 75);
					Match(input,NOMBRE,Follow._NOMBRE_in_instruccion106); 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(11, 83);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:83: ( '+ ' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_1 = input.LA(1);

				if ((LA11_1==14))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:83: '+ '
					{
					DebugLocation(11, 83);
					Match(input,14,Follow._14_in_instruccion109); 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(11, 89);
				Match(input,TRES_CUATRO,Follow._TRES_CUATRO_in_instruccion112); 
				DebugLocation(11, 101);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:101: ( NOTACION )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
				int LA12_1 = input.LA(1);

				if ((LA12_1==NOTACION))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:101: NOTACION
					{
					DebugLocation(11, 101);
					Match(input,NOTACION,Follow._NOTACION_in_instruccion114); 

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(11, 111);
				Match(input,NOMBRE,Follow._NOMBRE_in_instruccion117); 
				DebugLocation(11, 118);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:11:118: ( ',X' )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_1 = input.LA(1);

				if ((LA13_1==15))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\dany_\\Desktop\\sicXE.g:11:118: ',X'
					{
					DebugLocation(11, 118);
					Match(input,15,Follow._15_in_instruccion119); 

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("instruccion", 4);
			LeaveRule("instruccion", 4);
			LeaveRule_instruccion();
	    }
	 	DebugLocation(11, 122);
		} finally { DebugExitRule(GrammarFileName, "instruccion"); }
		return;

	}
	// $ANTLR end "instruccion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_final() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_final() {}
	// $ANTLR start "final"
	// C:\\Users\\dany_\\Desktop\\sicXE.g:12:1: final : 'END' ( NOMBRE )? ( '\\n' )? ;
	[GrammarRule("final")]
	private void final()
	{
		EnterRule_final();
		EnterRule("final", 5);
		TraceIn("final", 5);
		try { DebugEnterRule(GrammarFileName, "final");
		DebugLocation(12, 27);
		try
		{
			// C:\\Users\\dany_\\Desktop\\sicXE.g:12:7: ( 'END' ( NOMBRE )? ( '\\n' )? )
			DebugEnterAlt(1);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:12:9: 'END' ( NOMBRE )? ( '\\n' )?
			{
			DebugLocation(12, 9);
			Match(input,16,Follow._16_in_final127); 
			DebugLocation(12, 15);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:12:15: ( NOMBRE )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_1 = input.LA(1);

			if ((LA15_1==NOMBRE))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:12:15: NOMBRE
				{
				DebugLocation(12, 15);
				Match(input,NOMBRE,Follow._NOMBRE_in_final129); 

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(12, 23);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:12:23: ( '\\n' )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_1 = input.LA(1);

			if ((LA16_1==17))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:12:23: '\\n'
				{
				DebugLocation(12, 23);
				Match(input,17,Follow._17_in_final132); 

				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("final", 5);
			LeaveRule("final", 5);
			LeaveRule_final();
	    }
	 	DebugLocation(12, 27);
		} finally { DebugExitRule(GrammarFileName, "final"); }
		return;

	}
	// $ANTLR end "final"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_directiva() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_directiva() {}
	// $ANTLR start "directiva"
	// C:\\Users\\dany_\\Desktop\\sicXE.g:13:1: directiva : ( NOMBRE )? TIPODIRECTIVA ( OPERACIONDIRECTIVA | INT ) ;
	[GrammarRule("directiva")]
	private void directiva()
	{
		EnterRule_directiva();
		EnterRule("directiva", 6);
		TraceIn("directiva", 6);
		try { DebugEnterRule(GrammarFileName, "directiva");
		DebugLocation(13, 1);
		try
		{
			// C:\\Users\\dany_\\Desktop\\sicXE.g:14:2: ( ( NOMBRE )? TIPODIRECTIVA ( OPERACIONDIRECTIVA | INT ) )
			DebugEnterAlt(1);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:14:4: ( NOMBRE )? TIPODIRECTIVA ( OPERACIONDIRECTIVA | INT )
			{
			DebugLocation(14, 4);
			// C:\\Users\\dany_\\Desktop\\sicXE.g:14:4: ( NOMBRE )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_1 = input.LA(1);

			if ((LA17_1==NOMBRE))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\dany_\\Desktop\\sicXE.g:14:4: NOMBRE
				{
				DebugLocation(14, 4);
				Match(input,NOMBRE,Follow._NOMBRE_in_directiva141); 

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(14, 12);
			Match(input,TIPODIRECTIVA,Follow._TIPODIRECTIVA_in_directiva144); 
			DebugLocation(14, 26);
			if (input.LA(1)==INT||input.LA(1)==OPERACIONDIRECTIVA)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("directiva", 6);
			LeaveRule("directiva", 6);
			LeaveRule_directiva();
	    }
	 	DebugLocation(15, 1);
		} finally { DebugExitRule(GrammarFileName, "directiva"); }
		return;

	}
	// $ANTLR end "directiva"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _inicio_in_programa36 = new BitSet(new ulong[]{0x178A0UL});
		public static readonly BitSet _proposicion_in_programa39 = new BitSet(new ulong[]{0x178A0UL});
		public static readonly BitSet _final_in_programa43 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOMBRE_in_inicio50 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _START_in_inicio52 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _DIR_in_inicio54 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_inicio55 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instruccion_in_proposicion64 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _directiva_in_proposicion66 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _17_in_proposicion68 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOMBRE_in_instruccion79 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _UNO_in_instruccion82 = new BitSet(new ulong[]{0x180UL});
		public static readonly BitSet _NOTACION_in_instruccion84 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _NOMBRE_in_instruccion87 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _15_in_instruccion88 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOMBRE_in_instruccion92 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _DOS_in_instruccion95 = new BitSet(new ulong[]{0x180UL});
		public static readonly BitSet _NOTACION_in_instruccion97 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _NOMBRE_in_instruccion100 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _15_in_instruccion101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOMBRE_in_instruccion106 = new BitSet(new ulong[]{0x5000UL});
		public static readonly BitSet _14_in_instruccion109 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _TRES_CUATRO_in_instruccion112 = new BitSet(new ulong[]{0x180UL});
		public static readonly BitSet _NOTACION_in_instruccion114 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _NOMBRE_in_instruccion117 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _15_in_instruccion119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_final127 = new BitSet(new ulong[]{0x20082UL});
		public static readonly BitSet _NOMBRE_in_final129 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _17_in_final132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOMBRE_in_directiva141 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _TIPODIRECTIVA_in_directiva144 = new BitSet(new ulong[]{0x240UL});
		public static readonly BitSet _set_in_directiva146 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
