//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SIC_gramatica.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SIC_gramaticaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NUMERO=12, VALOR=13, MNEMONICO=14, MNEMONICO1=15, MNEMONICO2V2=16, 
		MNEMONICO2V1=17, RSUB=18, BASE=19, DIRECTIVA_NUM=20, DIRECTIVA_VAL=21, 
		DIRECTIVA_END=22, DIRECTIVA_START=23, SIMBOLO=24, WS=25, NL=26;
	public const int
		RULE_prog = 0, RULE_inicio = 1, RULE_fin = 2, RULE_linea = 3, RULE_instruccion = 4, 
		RULE_instruccion2 = 5, RULE_instruccion3 = 6, RULE_instruccion4 = 7, RULE_directiva = 8;
	public static readonly string[] ruleNames = {
		"prog", "inicio", "fin", "linea", "instruccion", "instruccion2", "instruccion3", 
		"instruccion4", "directiva"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'@'", "'#'", "','", "'X'", "'A'", "'L'", "'B'", "'S'", "'T'", 
		"'F'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NUMERO", "VALOR", "MNEMONICO", "MNEMONICO1", "MNEMONICO2V2", "MNEMONICO2V1", 
		"RSUB", "BASE", "DIRECTIVA_NUM", "DIRECTIVA_VAL", "DIRECTIVA_END", "DIRECTIVA_START", 
		"SIMBOLO", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SIC_gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SIC_gramaticaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SIC_gramaticaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SIC_gramaticaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public LineaContext[] linea() {
			return GetRuleContexts<LineaContext>();
		}
		public LineaContext linea(int i) {
			return GetRuleContext<LineaContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; inicio();
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << MNEMONICO) | (1L << MNEMONICO1) | (1L << MNEMONICO2V2) | (1L << MNEMONICO2V1) | (1L << RSUB) | (1L << BASE) | (1L << DIRECTIVA_NUM) | (1L << DIRECTIVA_VAL) | (1L << SIMBOLO) | (1L << NL))) != 0)) {
				{
				{
				State = 19; linea();
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 25; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ITerminalNode SIMBOLO() { return GetToken(SIC_gramaticaParser.SIMBOLO, 0); }
		public ITerminalNode DIRECTIVA_START() { return GetToken(SIC_gramaticaParser.DIRECTIVA_START, 0); }
		public ITerminalNode NUMERO() { return GetToken(SIC_gramaticaParser.NUMERO, 0); }
		public ITerminalNode[] NL() { return GetTokens(SIC_gramaticaParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(SIC_gramaticaParser.NL, i);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(Context, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(SIMBOLO);
			State = 28; Match(DIRECTIVA_START);
			State = 29; Match(NUMERO);
			State = 31;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 30; Match(NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 33;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode DIRECTIVA_END() { return GetToken(SIC_gramaticaParser.DIRECTIVA_END, 0); }
		public ITerminalNode Eof() { return GetToken(SIC_gramaticaParser.Eof, 0); }
		public ITerminalNode SIMBOLO() { return GetToken(SIC_gramaticaParser.SIMBOLO, 0); }
		public ITerminalNode[] NL() { return GetTokens(SIC_gramaticaParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(SIC_gramaticaParser.NL, i);
		}
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(Context, State);
		EnterRule(_localctx, 4, RULE_fin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(DIRECTIVA_END);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIMBOLO) {
				{
				State = 36; Match(SIMBOLO);
				}
			}

			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 39; Match(NL);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 45; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineaContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public ITerminalNode NL() { return GetToken(SIC_gramaticaParser.NL, 0); }
		public ITerminalNode NUMERO() { return GetToken(SIC_gramaticaParser.NUMERO, 0); }
		public ITerminalNode[] SIMBOLO() { return GetTokens(SIC_gramaticaParser.SIMBOLO); }
		public ITerminalNode SIMBOLO(int i) {
			return GetToken(SIC_gramaticaParser.SIMBOLO, i);
		}
		public Instruccion2Context instruccion2() {
			return GetRuleContext<Instruccion2Context>(0);
		}
		public Instruccion3Context instruccion3() {
			return GetRuleContext<Instruccion3Context>(0);
		}
		public Instruccion4Context instruccion4() {
			return GetRuleContext<Instruccion4Context>(0);
		}
		public LineaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linea; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterLinea(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitLinea(this);
		}
	}

	[RuleVersion(0)]
	public LineaContext linea() {
		LineaContext _localctx = new LineaContext(Context, State);
		EnterRule(_localctx, 6, RULE_linea);
		int _la;
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 48;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SIMBOLO) {
						{
						State = 47; Match(SIMBOLO);
						}
					}

					}
					break;
				case 2:
					{
					{
					State = 51;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 50; Match(SIMBOLO);
						}
						}
						State = 53;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SIMBOLO );
					State = 55; Match(NUMERO);
					}
					}
					break;
				}
				State = 58; instruccion();
				State = 59; Match(NL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SIMBOLO) {
						{
						State = 61; Match(SIMBOLO);
						}
					}

					}
					break;
				case 2:
					{
					{
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 64; Match(SIMBOLO);
						}
						}
						State = 67;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SIMBOLO );
					State = 69; Match(NUMERO);
					}
					}
					break;
				}
				State = 72; instruccion2();
				State = 73; Match(NL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 76;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SIMBOLO) {
						{
						State = 75; Match(SIMBOLO);
						}
					}

					}
					break;
				case 2:
					{
					{
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 78; Match(SIMBOLO);
						}
						}
						State = 81;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SIMBOLO );
					State = 83; Match(NUMERO);
					}
					}
					break;
				}
				State = 86; instruccion3();
				State = 87; Match(NL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SIMBOLO) {
						{
						State = 89; Match(SIMBOLO);
						}
					}

					}
					break;
				case 2:
					{
					{
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 92; Match(SIMBOLO);
						}
						}
						State = 95;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SIMBOLO );
					State = 97; Match(NUMERO);
					}
					}
					break;
				}
				State = 100; instruccion4();
				State = 101; Match(NL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 103; Match(NL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public ITerminalNode MNEMONICO() { return GetToken(SIC_gramaticaParser.MNEMONICO, 0); }
		public ITerminalNode NUMERO() { return GetToken(SIC_gramaticaParser.NUMERO, 0); }
		public ITerminalNode[] SIMBOLO() { return GetTokens(SIC_gramaticaParser.SIMBOLO); }
		public ITerminalNode SIMBOLO(int i) {
			return GetToken(SIC_gramaticaParser.SIMBOLO, i);
		}
		public ITerminalNode RSUB() { return GetToken(SIC_gramaticaParser.RSUB, 0); }
		public ITerminalNode BASE() { return GetToken(SIC_gramaticaParser.BASE, 0); }
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruccion);
		int _la;
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case MNEMONICO:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 106; Match(T__0);
					}
				}

				State = 109; Match(MNEMONICO);
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1 || _la==T__2) {
					{
					State = 111;
					_la = TokenStream.LA(1);
					if ( !(_la==T__1 || _la==T__2) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SIMBOLO) {
						{
						State = 114; Match(SIMBOLO);
						}
					}

					}
					break;
				case 2:
					{
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NUMERO) {
						{
						State = 117; Match(NUMERO);
						}
					}

					}
					break;
				case 3:
					{
					{
					State = 121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 120; Match(SIMBOLO);
						}
						}
						State = 123;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SIMBOLO );
					State = 125; Match(NUMERO);
					}
					}
					break;
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 128; Match(T__3);
						}
						}
						State = 131;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==T__3 );
					State = 133; Match(T__4);
					}
				}

				}
				break;
			case RSUB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; Match(RSUB);
				}
				break;
			case BASE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 137; Match(BASE);
				{
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 138; Match(SIMBOLO);
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SIMBOLO );
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMERO) {
					{
					State = 143; Match(NUMERO);
					}
				}

				}
				}
				break;
			case DIRECTIVA_NUM:
			case DIRECTIVA_VAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 146; directiva();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion2Context : ParserRuleContext {
		public ITerminalNode MNEMONICO2V2() { return GetToken(SIC_gramaticaParser.MNEMONICO2V2, 0); }
		public ITerminalNode NUMERO() { return GetToken(SIC_gramaticaParser.NUMERO, 0); }
		public Instruccion2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterInstruccion2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitInstruccion2(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion2Context instruccion2() {
		Instruccion2Context _localctx = new Instruccion2Context(Context, State);
		EnterRule(_localctx, 10, RULE_instruccion2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(MNEMONICO2V2);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 150;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0) );
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 155; Match(T__3);
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
				{
				State = 160;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case NUMERO:
				{
				State = 161; Match(NUMERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion3Context : ParserRuleContext {
		public ITerminalNode MNEMONICO2V1() { return GetToken(SIC_gramaticaParser.MNEMONICO2V1, 0); }
		public Instruccion3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion3; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterInstruccion3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitInstruccion3(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion3Context instruccion3() {
		Instruccion3Context _localctx = new Instruccion3Context(Context, State);
		EnterRule(_localctx, 12, RULE_instruccion3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(MNEMONICO2V1);
			State = 165;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion4Context : ParserRuleContext {
		public ITerminalNode MNEMONICO1() { return GetToken(SIC_gramaticaParser.MNEMONICO1, 0); }
		public Instruccion4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion4; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterInstruccion4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitInstruccion4(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion4Context instruccion4() {
		Instruccion4Context _localctx = new Instruccion4Context(Context, State);
		EnterRule(_localctx, 14, RULE_instruccion4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(MNEMONICO1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public ITerminalNode DIRECTIVA_NUM() { return GetToken(SIC_gramaticaParser.DIRECTIVA_NUM, 0); }
		public ITerminalNode NUMERO() { return GetToken(SIC_gramaticaParser.NUMERO, 0); }
		public ITerminalNode DIRECTIVA_VAL() { return GetToken(SIC_gramaticaParser.DIRECTIVA_VAL, 0); }
		public ITerminalNode VALOR() { return GetToken(SIC_gramaticaParser.VALOR, 0); }
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISIC_gramaticaListener typedListener = listener as ISIC_gramaticaListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(Context, State);
		EnterRule(_localctx, 16, RULE_directiva);
		int _la;
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIRECTIVA_NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; Match(DIRECTIVA_NUM);
				State = 170; Match(NUMERO);
				}
				break;
			case DIRECTIVA_VAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; Match(DIRECTIVA_VAL);
				State = 172;
				_la = TokenStream.LA(1);
				if ( !(_la==NUMERO || _la==VALOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\xB2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x17', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1A', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x6', '\x3', '\"', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', '#', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '(', '\n', '\x4', 
		'\x3', '\x4', '\a', '\x4', '+', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'.', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x5', '\x5', 
		'\x33', '\n', '\x5', '\x3', '\x5', '\x6', '\x5', '\x36', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '\x37', '\x3', '\x5', '\x5', '\x5', ';', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x41', '\n', '\x5', '\x3', '\x5', '\x6', '\x5', '\x44', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', '\x45', '\x3', '\x5', '\x5', '\x5', 
		'I', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'O', '\n', '\x5', '\x3', '\x5', '\x6', '\x5', 'R', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', 'S', '\x3', '\x5', '\x5', '\x5', 'W', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', ']', '\n', '\x5', '\x3', '\x5', '\x6', '\x5', '`', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '\x61', '\x3', '\x5', '\x5', '\x5', '\x65', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'k', '\n', '\x5', '\x3', '\x6', '\x5', '\x6', 'n', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 's', '\n', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'v', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'y', '\n', '\x6', '\x3', '\x6', '\x6', '\x6', '|', '\n', '\x6', '\r', 
		'\x6', '\xE', '\x6', '}', '\x3', '\x6', '\x5', '\x6', '\x81', '\n', '\x6', 
		'\x3', '\x6', '\x6', '\x6', '\x84', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 
		'\x85', '\x3', '\x6', '\x5', '\x6', '\x89', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x6', '\x6', '\x8E', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', '\x8F', '\x3', '\x6', '\x5', '\x6', '\x93', '\n', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x96', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x6', '\a', '\x9A', '\n', '\a', '\r', '\a', '\xE', '\a', '\x9B', '\x3', 
		'\a', '\x6', '\a', '\x9F', '\n', '\a', '\r', '\a', '\xE', '\a', '\xA0', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\xA5', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xB0', '\n', '\n', '\x3', 
		'\n', '\x2', '\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x2', '\x5', '\x3', '\x2', '\x4', '\x5', '\x3', '\x2', 
		'\a', '\r', '\x3', '\x2', '\xE', '\xF', '\x2', '\xCE', '\x2', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '%', '\x3', '\x2', '\x2', '\x2', '\b', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x95', '\x3', '\x2', '\x2', '\x2', '\f', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x12', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x18', '\x5', '\x4', '\x3', '\x2', '\x15', '\x17', '\x5', 
		'\b', '\x5', '\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', '\x1A', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'\x19', '\x2', '\x2', '\x1F', '!', '\a', '\xE', '\x2', '\x2', ' ', '\"', 
		'\a', '\x1C', '\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '%', '\'', '\a', '\x18', '\x2', '\x2', '&', '(', '\a', '\x1A', 
		'\x2', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', 
		'\x2', '\x2', '\x2', '(', ',', '\x3', '\x2', '\x2', '\x2', ')', '+', '\a', 
		'\x1C', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', '.', 
		'\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', 
		'-', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x3', '\x2', '\x2', '\x2', 
		'.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x2', '\x2', 
		'\x3', '\x30', '\a', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\a', 
		'\x1A', '\x2', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x33', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x36', '\a', '\x1A', '\x2', '\x2', '\x35', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\a', 
		'\xE', '\x2', '\x2', ':', '\x32', '\x3', '\x2', '\x2', '\x2', ':', '\x35', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\x5', '\n', '\x6', '\x2', '=', '>', '\a', '\x1C', '\x2', '\x2', 
		'>', 'k', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\a', '\x1A', '\x2', 
		'\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x41', 'I', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', 
		'\a', '\x1A', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'I', '\a', '\xE', '\x2', '\x2', 'H', 
		'@', '\x3', '\x2', '\x2', '\x2', 'H', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x5', '\f', '\a', '\x2', 
		'K', 'L', '\a', '\x1C', '\x2', '\x2', 'L', 'k', '\x3', '\x2', '\x2', '\x2', 
		'M', 'O', '\a', '\x1A', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'W', '\x3', '\x2', '\x2', '\x2', 
		'P', 'R', '\a', '\x1A', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\a', '\xE', '\x2', '\x2', 'V', 'N', '\x3', '\x2', '\x2', '\x2', 
		'V', 'Q', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x5', '\xE', '\b', '\x2', 'Y', 'Z', '\a', '\x1C', '\x2', '\x2', 
		'Z', 'k', '\x3', '\x2', '\x2', '\x2', '[', ']', '\a', '\x1A', '\x2', '\x2', 
		'\\', '[', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', 
		'\x2', ']', '\x65', '\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '\x1A', 
		'\x2', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x65', '\a', '\xE', '\x2', '\x2', '\x64', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '_', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x5', '\x10', '\t', 
		'\x2', 'g', 'h', '\a', '\x1C', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'k', '\a', '\x1C', '\x2', '\x2', 'j', ':', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'H', '\x3', '\x2', '\x2', '\x2', 'j', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\x64', '\x3', '\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', '\t', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\a', '\x3', 
		'\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x10', 
		'\x2', '\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\t', '\x2', 
		'\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', 
		'\x2', '\x2', 's', '\x80', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\a', 
		'\x1A', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'u', 'v', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x81', '\x3', '\x2', '\x2', '\x2', 'w', 
		'y', '\a', '\xE', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '\x81', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\a', '\x1A', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x81', '\a', '\xE', '\x2', '\x2', '\x80', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\x80', 'x', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x81', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x84', '\a', '\x6', '\x2', '\x2', '\x83', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\a', 
		'\a', '\x2', '\x2', '\x88', '\x83', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x96', '\a', '\x14', '\x2', '\x2', '\x8B', '\x8D', '\a', 
		'\x15', '\x2', '\x2', '\x8C', '\x8E', '\a', '\x1A', '\x2', '\x2', '\x8D', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x92', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x93', '\a', '\xE', '\x2', '\x2', '\x92', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x96', '\x5', '\x12', '\n', '\x2', '\x95', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x95', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\v', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x99', '\a', '\x12', '\x2', '\x2', '\x98', '\x9A', '\t', '\x3', '\x2', 
		'\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9F', '\a', '\x6', '\x2', '\x2', '\x9E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\t', 
		'\x3', '\x2', '\x2', '\xA3', '\xA5', '\a', '\xE', '\x2', '\x2', '\xA4', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\r', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', 
		'\x13', '\x2', '\x2', '\xA7', '\xA8', '\t', '\x3', '\x2', '\x2', '\xA8', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x11', '\x2', 
		'\x2', '\xAA', '\x11', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', 
		'\x16', '\x2', '\x2', '\xAC', '\xB0', '\a', '\xE', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\x17', '\x2', '\x2', '\xAE', '\xB0', '\t', '\x4', '\x2', 
		'\x2', '\xAF', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\x13', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x18', '#', '\'', ',', '\x32', '\x37', ':', '@', '\x45', 'H', 'N', 'S', 
		'V', '\\', '\x61', '\x64', 'j', 'm', 'r', 'u', 'x', '}', '\x80', '\x85', 
		'\x88', '\x8F', '\x92', '\x95', '\x9B', '\xA0', '\xA4', '\xAF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
