//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\dany_\\Desktop\\antlr2020.g 2020-10-15 21:00:37

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class antlr2020Lexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int DIR=4;
	public const int DIRECCION=5;
	public const int MAYUSCULAS=6;
	public const int MINUSCULAS=7;
	public const int NOMBRE=8;
	public const int NUMERO=9;
	public const int OPDIRECTIVA=10;
	public const int OPERACION=11;
	public const int REGISTRO=12;
	public const int START=13;
	public const int TIPODIRECTIVA=14;

    // delegates
    // delegators

	public antlr2020Lexer()
	{
		OnCreated();
	}

	public antlr2020Lexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public antlr2020Lexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\dany_\\Desktop\\antlr2020.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 1);
    	TraceIn("T__15", 1);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:7:7: ( ',X' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:7:9: ',X'
    		{
    		DebugLocation(7, 9);
    		Match(",X"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 1);
    		LeaveRule("T__15", 1);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__16() {}

    // $ANTLR start "T__16"
    [GrammarRule("T__16")]
    private void mT__16()
    {
    	EnterRule_T__16();
    	EnterRule("T__16", 2);
    	TraceIn("T__16", 2);
    		try
    		{
    		int _type = T__16;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:8:7: ( 'END' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:8:9: 'END'
    		{
    		DebugLocation(8, 9);
    		Match("END"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__16", 2);
    		LeaveRule("T__16", 2);
    		LeaveRule_T__16();
        }
    }
    // $ANTLR end "T__16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 3);
    	TraceIn("T__17", 3);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:9:7: ( '\\n' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:9:9: '\\n'
    		{
    		DebugLocation(9, 9);
    		Match('\n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 3);
    		LeaveRule("T__17", 3);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OPERACION() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OPERACION() {}

    // $ANTLR start "OPERACION"
    [GrammarRule("OPERACION")]
    private void mOPERACION()
    {
    	EnterRule_OPERACION();
    	EnterRule("OPERACION", 4);
    	TraceIn("OPERACION", 4);
    		try
    		{
    		int _type = OPERACION;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:2: ( 'ADD' | 'AND' | 'COMP' | 'DIV' | 'J' | 'JEQ' | 'JGT' | 'JLT' | 'JSUB' | 'LDA' | 'LDCG' | 'LDL' | 'LDX' | 'MUL' | 'OR' | 'RD' | 'RSUB' | 'STA' | 'STCH' | 'STL' | 'STSW' | 'STX' | 'SUB' | 'TD' | 'TIX' | 'WD' )
    		int alt1=26;
    		try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    		switch (input.LA(1))
    		{
    		case 'A':
    			{
    			int LA1_1 = input.LA(2);

    			if ((LA1_1=='D'))
    			{
    				alt1 = 1;
    			}
    			else if ((LA1_1=='N'))
    			{
    				alt1 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 1, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 'C':
    			{
    			alt1 = 3;
    			}
    			break;
    		case 'D':
    			{
    			alt1 = 4;
    			}
    			break;
    		case 'J':
    			{
    			switch (input.LA(2))
    			{
    			case 'E':
    				{
    				alt1 = 6;
    				}
    				break;
    			case 'G':
    				{
    				alt1 = 7;
    				}
    				break;
    			case 'L':
    				{
    				alt1 = 8;
    				}
    				break;
    			case 'S':
    				{
    				alt1 = 9;
    				}
    				break;
    			default:
    				alt1=5;
    				break;

    			}

    			}
    			break;
    		case 'L':
    			{
    			int LA1_5 = input.LA(2);

    			if ((LA1_5=='D'))
    			{
    				switch (input.LA(3))
    				{
    				case 'A':
    					{
    					alt1 = 10;
    					}
    					break;
    				case 'C':
    					{
    					alt1 = 11;
    					}
    					break;
    				case 'L':
    					{
    					alt1 = 12;
    					}
    					break;
    				case 'X':
    					{
    					alt1 = 13;
    					}
    					break;
    				default:
    					{
    						NoViableAltException nvae = new NoViableAltException("", 1, 19, input);
    						DebugRecognitionException(nvae);
    						throw nvae;
    					}
    				}

    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 5, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 'M':
    			{
    			alt1 = 14;
    			}
    			break;
    		case 'O':
    			{
    			alt1 = 15;
    			}
    			break;
    		case 'R':
    			{
    			int LA1_8 = input.LA(2);

    			if ((LA1_8=='D'))
    			{
    				alt1 = 16;
    			}
    			else if ((LA1_8=='S'))
    			{
    				alt1 = 17;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 8, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 'S':
    			{
    			int LA1_9 = input.LA(2);

    			if ((LA1_9=='T'))
    			{
    				switch (input.LA(3))
    				{
    				case 'A':
    					{
    					alt1 = 18;
    					}
    					break;
    				case 'C':
    					{
    					alt1 = 19;
    					}
    					break;
    				case 'L':
    					{
    					alt1 = 20;
    					}
    					break;
    				case 'S':
    					{
    					alt1 = 21;
    					}
    					break;
    				case 'X':
    					{
    					alt1 = 22;
    					}
    					break;
    				default:
    					{
    						NoViableAltException nvae = new NoViableAltException("", 1, 22, input);
    						DebugRecognitionException(nvae);
    						throw nvae;
    					}
    				}

    			}
    			else if ((LA1_9=='U'))
    			{
    				alt1 = 23;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 9, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 'T':
    			{
    			int LA1_10 = input.LA(2);

    			if ((LA1_10=='D'))
    			{
    				alt1 = 24;
    			}
    			else if ((LA1_10=='I'))
    			{
    				alt1 = 25;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 10, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 'W':
    			{
    			alt1 = 26;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(1); }
    		switch (alt1)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:4: 'ADD'
    			{
    			DebugLocation(24, 4);
    			Match("ADD"); 


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:12: 'AND'
    			{
    			DebugLocation(24, 12);
    			Match("AND"); 


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:20: 'COMP'
    			{
    			DebugLocation(24, 20);
    			Match("COMP"); 


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:29: 'DIV'
    			{
    			DebugLocation(24, 29);
    			Match("DIV"); 


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:37: 'J'
    			{
    			DebugLocation(24, 37);
    			Match('J'); 

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:43: 'JEQ'
    			{
    			DebugLocation(24, 43);
    			Match("JEQ"); 


    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:51: 'JGT'
    			{
    			DebugLocation(24, 51);
    			Match("JGT"); 


    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:59: 'JLT'
    			{
    			DebugLocation(24, 59);
    			Match("JLT"); 


    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:67: 'JSUB'
    			{
    			DebugLocation(24, 67);
    			Match("JSUB"); 


    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:76: 'LDA'
    			{
    			DebugLocation(24, 76);
    			Match("LDA"); 


    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:84: 'LDCG'
    			{
    			DebugLocation(24, 84);
    			Match("LDCG"); 


    			}
    			break;
    		case 12:
    			DebugEnterAlt(12);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:93: 'LDL'
    			{
    			DebugLocation(24, 93);
    			Match("LDL"); 


    			}
    			break;
    		case 13:
    			DebugEnterAlt(13);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:101: 'LDX'
    			{
    			DebugLocation(24, 101);
    			Match("LDX"); 


    			}
    			break;
    		case 14:
    			DebugEnterAlt(14);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:109: 'MUL'
    			{
    			DebugLocation(24, 109);
    			Match("MUL"); 


    			}
    			break;
    		case 15:
    			DebugEnterAlt(15);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:117: 'OR'
    			{
    			DebugLocation(24, 117);
    			Match("OR"); 


    			}
    			break;
    		case 16:
    			DebugEnterAlt(16);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:124: 'RD'
    			{
    			DebugLocation(24, 124);
    			Match("RD"); 


    			}
    			break;
    		case 17:
    			DebugEnterAlt(17);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:131: 'RSUB'
    			{
    			DebugLocation(24, 131);
    			Match("RSUB"); 


    			}
    			break;
    		case 18:
    			DebugEnterAlt(18);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:140: 'STA'
    			{
    			DebugLocation(24, 140);
    			Match("STA"); 


    			}
    			break;
    		case 19:
    			DebugEnterAlt(19);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:148: 'STCH'
    			{
    			DebugLocation(24, 148);
    			Match("STCH"); 


    			}
    			break;
    		case 20:
    			DebugEnterAlt(20);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:157: 'STL'
    			{
    			DebugLocation(24, 157);
    			Match("STL"); 


    			}
    			break;
    		case 21:
    			DebugEnterAlt(21);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:165: 'STSW'
    			{
    			DebugLocation(24, 165);
    			Match("STSW"); 


    			}
    			break;
    		case 22:
    			DebugEnterAlt(22);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:174: 'STX'
    			{
    			DebugLocation(24, 174);
    			Match("STX"); 


    			}
    			break;
    		case 23:
    			DebugEnterAlt(23);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:182: 'SUB'
    			{
    			DebugLocation(24, 182);
    			Match("SUB"); 


    			}
    			break;
    		case 24:
    			DebugEnterAlt(24);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:190: 'TD'
    			{
    			DebugLocation(24, 190);
    			Match("TD"); 


    			}
    			break;
    		case 25:
    			DebugEnterAlt(25);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:197: 'TIX'
    			{
    			DebugLocation(24, 197);
    			Match("TIX"); 


    			}
    			break;
    		case 26:
    			DebugEnterAlt(26);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:24:205: 'WD'
    			{
    			DebugLocation(24, 205);
    			Match("WD"); 


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OPERACION", 4);
    		LeaveRule("OPERACION", 4);
    		LeaveRule_OPERACION();
        }
    }
    // $ANTLR end "OPERACION"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TIPODIRECTIVA() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TIPODIRECTIVA() {}

    // $ANTLR start "TIPODIRECTIVA"
    [GrammarRule("TIPODIRECTIVA")]
    private void mTIPODIRECTIVA()
    {
    	EnterRule_TIPODIRECTIVA();
    	EnterRule("TIPODIRECTIVA", 5);
    	TraceIn("TIPODIRECTIVA", 5);
    		try
    		{
    		int _type = TIPODIRECTIVA;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:28:2: ( 'BYTE' | 'WORD' | 'RESB' | 'RESW' )
    		int alt2=4;
    		try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    		switch (input.LA(1))
    		{
    		case 'B':
    			{
    			alt2 = 1;
    			}
    			break;
    		case 'W':
    			{
    			alt2 = 2;
    			}
    			break;
    		case 'R':
    			{
    			int LA2_3 = input.LA(2);

    			if ((LA2_3=='E'))
    			{
    				int LA2_4 = input.LA(3);

    				if ((LA2_4=='S'))
    				{
    					int LA2_5 = input.LA(4);

    					if ((LA2_5=='B'))
    					{
    						alt2 = 3;
    					}
    					else if ((LA2_5=='W'))
    					{
    						alt2 = 4;
    					}
    					else
    					{
    						NoViableAltException nvae = new NoViableAltException("", 2, 5, input);
    						DebugRecognitionException(nvae);
    						throw nvae;
    					}
    				}
    				else
    				{
    					NoViableAltException nvae = new NoViableAltException("", 2, 4, input);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(2); }
    		switch (alt2)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:28:4: 'BYTE'
    			{
    			DebugLocation(28, 4);
    			Match("BYTE"); 


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:28:13: 'WORD'
    			{
    			DebugLocation(28, 13);
    			Match("WORD"); 


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:28:22: 'RESB'
    			{
    			DebugLocation(28, 22);
    			Match("RESB"); 


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:28:31: 'RESW'
    			{
    			DebugLocation(28, 31);
    			Match("RESW"); 


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TIPODIRECTIVA", 5);
    		LeaveRule("TIPODIRECTIVA", 5);
    		LeaveRule_TIPODIRECTIVA();
        }
    }
    // $ANTLR end "TIPODIRECTIVA"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OPDIRECTIVA() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OPDIRECTIVA() {}

    // $ANTLR start "OPDIRECTIVA"
    [GrammarRule("OPDIRECTIVA")]
    private void mOPDIRECTIVA()
    {
    	EnterRule_OPDIRECTIVA();
    	EnterRule("OPDIRECTIVA", 6);
    	TraceIn("OPDIRECTIVA", 6);
    		try
    		{
    		int _type = OPDIRECTIVA;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:32:2: ( NUMERO | REGISTRO ( NUMERO | NOMBRE ) )
    		int alt4=2;
    		try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    		switch (input.LA(1))
    		{
    		case 'C':
    			{
    			switch (input.LA(2))
    			{
    			case 'A':
    			case 'B':
    			case 'C':
    			case 'D':
    			case 'E':
    			case 'F':
    			case 'a':
    			case 'b':
    			case 'c':
    			case 'd':
    			case 'e':
    			case 'f':
    				{
    				alt4 = 1;
    				}
    				break;
    			case '0':
    			case '1':
    			case '2':
    			case '3':
    			case '4':
    			case '5':
    			case '6':
    			case '7':
    			case '8':
    			case '9':
    				{
    				alt4 = 1;
    				}
    				break;
    			case 'G':
    			case 'H':
    			case 'I':
    			case 'J':
    			case 'K':
    			case 'L':
    			case 'M':
    			case 'N':
    			case 'O':
    			case 'P':
    			case 'Q':
    			case 'R':
    			case 'S':
    			case 'T':
    			case 'U':
    			case 'V':
    			case 'W':
    			case 'X':
    			case 'Y':
    			case 'Z':
    			case '_':
    			case 'g':
    			case 'h':
    			case 'i':
    			case 'j':
    			case 'k':
    			case 'l':
    			case 'm':
    			case 'n':
    			case 'o':
    			case 'p':
    			case 'q':
    			case 'r':
    			case 's':
    			case 't':
    			case 'u':
    			case 'v':
    			case 'w':
    			case 'x':
    			case 'y':
    			case 'z':
    				{
    				alt4 = 2;
    				}
    				break;
    			default:
    				alt4=1;
    				break;

    			}

    			}
    			break;
    		case '0':
    		case '1':
    		case '2':
    		case '3':
    		case '4':
    		case '5':
    		case '6':
    		case '7':
    		case '8':
    		case '9':
    		case 'A':
    		case 'B':
    		case 'D':
    		case 'E':
    		case 'F':
    		case 'a':
    		case 'b':
    		case 'c':
    		case 'd':
    		case 'e':
    		case 'f':
    			{
    			alt4 = 1;
    			}
    			break;
    		case 'H':
    		case 'X':
    			{
    			alt4 = 2;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(4); }
    		switch (alt4)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:32:4: NUMERO
    			{
    			DebugLocation(32, 4);
    			mNUMERO(); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:32:12: REGISTRO ( NUMERO | NOMBRE )
    			{
    			DebugLocation(32, 12);
    			mREGISTRO(); 
    			DebugLocation(32, 21);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:32:21: ( NUMERO | NOMBRE )
    			int alt3=2;
    			try { DebugEnterSubRule(3);
    			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    			int LA3_0 = input.LA(1);

    			if (((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='F')||(LA3_0>='a' && LA3_0<='f')))
    			{
    				alt3 = 1;
    			}
    			else if (((LA3_0>='G' && LA3_0<='Z')||LA3_0=='_'||(LA3_0>='g' && LA3_0<='z')))
    			{
    				alt3 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			} finally { DebugExitDecision(3); }
    			switch (alt3)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\dany_\\Desktop\\antlr2020.g:32:22: NUMERO
    				{
    				DebugLocation(32, 22);
    				mNUMERO(); 

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// C:\\Users\\dany_\\Desktop\\antlr2020.g:32:31: NOMBRE
    				{
    				DebugLocation(32, 31);
    				mNOMBRE(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(3); }


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OPDIRECTIVA", 6);
    		LeaveRule("OPDIRECTIVA", 6);
    		LeaveRule_OPDIRECTIVA();
        }
    }
    // $ANTLR end "OPDIRECTIVA"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_REGISTRO() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_REGISTRO() {}

    // $ANTLR start "REGISTRO"
    [GrammarRule("REGISTRO")]
    private void mREGISTRO()
    {
    	EnterRule_REGISTRO();
    	EnterRule("REGISTRO", 7);
    	TraceIn("REGISTRO", 7);
    		try
    		{
    		int _type = REGISTRO;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:34:9: ( 'X' | 'C' | 'H' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:
    		{
    		DebugLocation(34, 9);
    		if (input.LA(1)=='C'||input.LA(1)=='H'||input.LA(1)=='X')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("REGISTRO", 7);
    		LeaveRule("REGISTRO", 7);
    		LeaveRule_REGISTRO();
        }
    }
    // $ANTLR end "REGISTRO"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIRECCION() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIRECCION() {}

    // $ANTLR start "DIRECCION"
    [GrammarRule("DIRECCION")]
    private void mDIRECCION()
    {
    	EnterRule_DIRECCION();
    	EnterRule("DIRECCION", 8);
    	TraceIn("DIRECCION", 8);
    		try
    		{
    		int _type = DIRECCION;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:37:2: ( 'DIRECCION' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:37:4: 'DIRECCION'
    		{
    		DebugLocation(37, 4);
    		Match("DIRECCION"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DIRECCION", 8);
    		LeaveRule("DIRECCION", 8);
    		LeaveRule_DIRECCION();
        }
    }
    // $ANTLR end "DIRECCION"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_START() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_START() {}

    // $ANTLR start "START"
    [GrammarRule("START")]
    private void mSTART()
    {
    	EnterRule_START();
    	EnterRule("START", 9);
    	TraceIn("START", 9);
    		try
    		{
    		int _type = START;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:40:7: ( 'START' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:40:9: 'START'
    		{
    		DebugLocation(40, 9);
    		Match("START"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("START", 9);
    		LeaveRule("START", 9);
    		LeaveRule_START();
        }
    }
    // $ANTLR end "START"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIR() {}

    // $ANTLR start "DIR"
    [GrammarRule("DIR")]
    private void mDIR()
    {
    	EnterRule_DIR();
    	EnterRule("DIR", 10);
    	TraceIn("DIR", 10);
    		try
    		{
    		int _type = DIR;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:43:5: ( NUMERO ( 'H' )? )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:43:7: NUMERO ( 'H' )?
    		{
    		DebugLocation(43, 7);
    		mNUMERO(); 
    		DebugLocation(43, 13);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:43:13: ( 'H' )?
    		int alt5=2;
    		try { DebugEnterSubRule(5);
    		try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    		int LA5_0 = input.LA(1);

    		if ((LA5_0=='H'))
    		{
    			alt5 = 1;
    		}
    		} finally { DebugExitDecision(5); }
    		switch (alt5)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\antlr2020.g:43:13: 'H'
    			{
    			DebugLocation(43, 13);
    			Match('H'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(5); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DIR", 10);
    		LeaveRule("DIR", 10);
    		LeaveRule_DIR();
        }
    }
    // $ANTLR end "DIR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_MAYUSCULAS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_MAYUSCULAS() {}

    // $ANTLR start "MAYUSCULAS"
    [GrammarRule("MAYUSCULAS")]
    private void mMAYUSCULAS()
    {
    	EnterRule_MAYUSCULAS();
    	EnterRule("MAYUSCULAS", 11);
    	TraceIn("MAYUSCULAS", 11);
    		try
    		{
    		int _type = MAYUSCULAS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:46:2: ( 'A' .. 'Z' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:
    		{
    		DebugLocation(46, 2);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("MAYUSCULAS", 11);
    		LeaveRule("MAYUSCULAS", 11);
    		LeaveRule_MAYUSCULAS();
        }
    }
    // $ANTLR end "MAYUSCULAS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_MINUSCULAS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_MINUSCULAS() {}

    // $ANTLR start "MINUSCULAS"
    [GrammarRule("MINUSCULAS")]
    private void mMINUSCULAS()
    {
    	EnterRule_MINUSCULAS();
    	EnterRule("MINUSCULAS", 12);
    	TraceIn("MINUSCULAS", 12);
    		try
    		{
    		int _type = MINUSCULAS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:49:2: ( 'a' .. 'z' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:
    		{
    		DebugLocation(49, 2);
    		if ((input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("MINUSCULAS", 12);
    		LeaveRule("MINUSCULAS", 12);
    		LeaveRule_MINUSCULAS();
        }
    }
    // $ANTLR end "MINUSCULAS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NUMERO() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NUMERO() {}

    // $ANTLR start "NUMERO"
    [GrammarRule("NUMERO")]
    private void mNUMERO()
    {
    	EnterRule_NUMERO();
    	EnterRule("NUMERO", 13);
    	TraceIn("NUMERO", 13);
    		try
    		{
    		int _type = NUMERO;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:51:8: ( ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:51:10: ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )+
    		{
    		DebugLocation(51, 10);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:51:10: ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )+
    		int cnt6=0;
    		try { DebugEnterSubRule(6);
    		while (true)
    		{
    			int alt6=2;
    			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    			int LA6_0 = input.LA(1);

    			if (((LA6_0>='0' && LA6_0<='9')||(LA6_0>='A' && LA6_0<='F')||(LA6_0>='a' && LA6_0<='f')))
    			{
    				alt6 = 1;
    			}


    			} finally { DebugExitDecision(6); }
    			switch (alt6)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\dany_\\Desktop\\antlr2020.g:
    				{
    				DebugLocation(51, 10);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt6 >= 1)
    					goto loop6;

    				EarlyExitException eee6 = new EarlyExitException( 6, input );
    				DebugRecognitionException(eee6);
    				throw eee6;
    			}
    			cnt6++;
    		}
    		loop6:
    			;

    		} finally { DebugExitSubRule(6); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NUMERO", 13);
    		LeaveRule("NUMERO", 13);
    		LeaveRule_NUMERO();
        }
    }
    // $ANTLR end "NUMERO"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NOMBRE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NOMBRE() {}

    // $ANTLR start "NOMBRE"
    [GrammarRule("NOMBRE")]
    private void mNOMBRE()
    {
    	EnterRule_NOMBRE();
    	EnterRule("NOMBRE", 14);
    	TraceIn("NOMBRE", 14);
    		try
    		{
    		int _type = NOMBRE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:53:8: ( ( MAYUSCULAS | MINUSCULAS | '_' ) ( MAYUSCULAS | MINUSCULAS | NUMERO | '_' )* )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:53:10: ( MAYUSCULAS | MINUSCULAS | '_' ) ( MAYUSCULAS | MINUSCULAS | NUMERO | '_' )*
    		{
    		DebugLocation(53, 10);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(53, 38);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:53:38: ( MAYUSCULAS | MINUSCULAS | NUMERO | '_' )*
    		try { DebugEnterSubRule(7);
    		while (true)
    		{
    			int alt7=5;
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			switch (input.LA(1))
    			{
    			case 'A':
    			case 'B':
    			case 'C':
    			case 'D':
    			case 'E':
    			case 'F':
    			case 'G':
    			case 'H':
    			case 'I':
    			case 'J':
    			case 'K':
    			case 'L':
    			case 'M':
    			case 'N':
    			case 'O':
    			case 'P':
    			case 'Q':
    			case 'R':
    			case 'S':
    			case 'T':
    			case 'U':
    			case 'V':
    			case 'W':
    			case 'X':
    			case 'Y':
    			case 'Z':
    				{
    				alt7 = 1;
    				}
    				break;
    			case 'a':
    			case 'b':
    			case 'c':
    			case 'd':
    			case 'e':
    			case 'f':
    			case 'g':
    			case 'h':
    			case 'i':
    			case 'j':
    			case 'k':
    			case 'l':
    			case 'm':
    			case 'n':
    			case 'o':
    			case 'p':
    			case 'q':
    			case 'r':
    			case 's':
    			case 't':
    			case 'u':
    			case 'v':
    			case 'w':
    			case 'x':
    			case 'y':
    			case 'z':
    				{
    				alt7 = 2;
    				}
    				break;
    			case '0':
    			case '1':
    			case '2':
    			case '3':
    			case '4':
    			case '5':
    			case '6':
    			case '7':
    			case '8':
    			case '9':
    				{
    				alt7 = 3;
    				}
    				break;
    			case '_':
    				{
    				alt7 = 4;
    				}
    				break;
    			}

    			} finally { DebugExitDecision(7); }
    			switch ( alt7 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\dany_\\Desktop\\antlr2020.g:53:39: MAYUSCULAS
    				{
    				DebugLocation(53, 39);
    				mMAYUSCULAS(); 

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// C:\\Users\\dany_\\Desktop\\antlr2020.g:53:50: MINUSCULAS
    				{
    				DebugLocation(53, 50);
    				mMINUSCULAS(); 

    				}
    				break;
    			case 3:
    				DebugEnterAlt(3);
    				// C:\\Users\\dany_\\Desktop\\antlr2020.g:53:61: NUMERO
    				{
    				DebugLocation(53, 61);
    				mNUMERO(); 

    				}
    				break;
    			case 4:
    				DebugEnterAlt(4);
    				// C:\\Users\\dany_\\Desktop\\antlr2020.g:53:68: '_'
    				{
    				DebugLocation(53, 68);
    				Match('_'); 

    				}
    				break;

    			default:
    				goto loop7;
    			}
    		}

    		loop7:
    			;

    		} finally { DebugExitSubRule(7); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NOMBRE", 14);
    		LeaveRule("NOMBRE", 14);
    		LeaveRule_NOMBRE();
        }
    }
    // $ANTLR end "NOMBRE"

    public override void mTokens()
    {
    	// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:8: ( T__15 | T__16 | T__17 | OPERACION | TIPODIRECTIVA | OPDIRECTIVA | REGISTRO | DIRECCION | START | DIR | MAYUSCULAS | MINUSCULAS | NUMERO | NOMBRE )
    	int alt8=14;
    	try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    	try
    	{
    		alt8 = dfa8.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(8); }
    	switch (alt8)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:10: T__15
    		{
    		DebugLocation(1, 10);
    		mT__15(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:16: T__16
    		{
    		DebugLocation(1, 16);
    		mT__16(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:22: T__17
    		{
    		DebugLocation(1, 22);
    		mT__17(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:28: OPERACION
    		{
    		DebugLocation(1, 28);
    		mOPERACION(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:38: TIPODIRECTIVA
    		{
    		DebugLocation(1, 38);
    		mTIPODIRECTIVA(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:52: OPDIRECTIVA
    		{
    		DebugLocation(1, 52);
    		mOPDIRECTIVA(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:64: REGISTRO
    		{
    		DebugLocation(1, 64);
    		mREGISTRO(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:73: DIRECCION
    		{
    		DebugLocation(1, 73);
    		mDIRECCION(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:83: START
    		{
    		DebugLocation(1, 83);
    		mSTART(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:89: DIR
    		{
    		DebugLocation(1, 89);
    		mDIR(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:93: MAYUSCULAS
    		{
    		DebugLocation(1, 93);
    		mMAYUSCULAS(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:104: MINUSCULAS
    		{
    		DebugLocation(1, 104);
    		mMINUSCULAS(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:115: NUMERO
    		{
    		DebugLocation(1, 115);
    		mNUMERO(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// C:\\Users\\dany_\\Desktop\\antlr2020.g:1:122: NOMBRE
    		{
    		DebugLocation(1, 122);
    		mNOMBRE(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA8 dfa8;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa8 = new DFA8(this);
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x2\xFFFF\x1\x18\x1\xFFFF\x3\x18\x1\x2C\x7\x2E\x2\x18\x1\x3B\x1\x18\x1"+
			"\x2E\x1\x18\x1\x40\x1\xFFFF\x1\x16\x1\xFFFF\x1\x18\x1\x3F\x3\x18\x1\x16"+
			"\x8\x18\x5\x16\x1\xFFFF\x1\x16\x1\xFFFF\x1\x16\x2\x2C\x4\x16\x1\x2C\x1"+
			"\x16\x1\x2C\x2\x16\x1\xFFFF\x3\x18\x2\xFFFF\x1\x6C\x2\x2C\xD\x18\x1\x2C"+
			"\x1\x16\x3\x2C\x1\x16\x1\x2C\x1\x16\x3\x2C\x2\x16\x1\x2C\x1\x16\x1\x2C"+
			"\x1\x16\x3\x2C\x2\x16\x5\x18\x1\xFFFF\x1\x2C\x1\x16\x3\x2C\x2\x7A\x1"+
			"\x16\x2\x2C\x2\x7A\x1\x16\x1\xFFFF\x1\x7D\x1\x16\x1\xFFFF\x2\x16\x1\x81"+
			"\x1\xFFFF";
		private const string DFA8_eofS =
			"\x82\xFFFF";
		private const string DFA8_minS =
			"\x1\xA\x1\xFFFF\x1\x30\x1\xFFFF\x12\x30\x1\xFFFF\x1\x44\x1\xFFFF\x5\x30"+
			"\x1\x44\x8\x30\x1\x52\x1\x51\x2\x54\x1\x55\x1\xFFFF\x1\x41\x1\xFFFF\x1"+
			"\x4C\x2\x30\x1\x55\x1\x53\x1\x41\x1\x42\x1\x30\x1\x58\x1\x30\x1\x52\x1"+
			"\x54\x1\xFFFF\x3\x30\x2\xFFFF\x11\x30\x1\x45\x3\x30\x1\x42\x1\x30\x1"+
			"\x47\x3\x30\x2\x42\x1\x30\x1\x48\x1\x30\x1\x57\x3\x30\x1\x44\x1\x45\x5"+
			"\x30\x1\xFFFF\x1\x30\x1\x43\x5\x30\x1\x54\x4\x30\x1\x43\x1\xFFFF\x1\x30"+
			"\x1\x49\x1\xFFFF\x1\x4F\x1\x4E\x1\x30\x1\xFFFF";
		private const string DFA8_maxS =
			"\x1\x7A\x1\xFFFF\x1\x7A\x1\xFFFF\x10\x7A\x1\x66\x1\x7A\x1\xFFFF\x1\x44"+
			"\x1\xFFFF\x5\x7A\x1\x44\x8\x7A\x1\x56\x1\x51\x2\x54\x1\x55\x1\xFFFF\x1"+
			"\x58\x1\xFFFF\x1\x4C\x2\x7A\x1\x55\x1\x53\x1\x58\x1\x42\x1\x7A\x1\x58"+
			"\x1\x7A\x1\x52\x1\x54\x1\xFFFF\x3\x7A\x2\xFFFF\x11\x7A\x1\x45\x3\x7A"+
			"\x1\x42\x1\x7A\x1\x47\x3\x7A\x1\x42\x1\x57\x1\x7A\x1\x48\x1\x7A\x1\x57"+
			"\x3\x7A\x1\x44\x1\x45\x5\x7A\x1\xFFFF\x1\x7A\x1\x43\x5\x7A\x1\x54\x4"+
			"\x7A\x1\x43\x1\xFFFF\x1\x7A\x1\x49\x1\xFFFF\x1\x4F\x1\x4E\x1\x7A\x1\xFFFF";
		private const string DFA8_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x3\x12\xFFFF\x1\xE\x1\xFFFF\x1\x6\x13\xFFFF"+
			"\x1\x4\x1\xFFFF\x1\xB\xC\xFFFF\x1\x7\x3\xFFFF\x1\xA\x1\xC\x2B\xFFFF\x1"+
			"\x2\xD\xFFFF\x1\x5\x2\xFFFF\x1\x9\x3\xFFFF\x1\x8";
		private const string DFA8_specialS =
			"\x82\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x1\x3\x21\xFFFF\x1\x1\x3\xFFFF\xA\x14\x7\xFFFF\x1\x4\x1\xF\x1\x5\x1"+
				"\x6\x1\x2\x1\x10\x1\x13\x1\x11\x1\x13\x1\x7\x1\x13\x1\x8\x1\x9\x1\x13"+
				"\x1\xA\x2\x13\x1\xB\x1\xC\x1\xD\x2\x13\x1\xE\x1\x11\x2\x13\x4\xFFFF"+
				"\x1\x16\x1\xFFFF\x6\x12\x14\x15",
				"",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x5\x16\x1\x17\xC\x16\x4\xFFFF"+
				"\x1\x16\x1\xFFFF\x6\x1B\x14\x16",
				"",
				"\xA\x1C\x7\xFFFF\x3\x19\x1\x1D\x2\x19\x1\x16\x1\x1A\x5\x16\x1\x1E\xC"+
				"\x16\x4\xFFFF\x1\x16\x1\xFFFF\x6\x1B\x14\x16",
				"\xA\x21\x7\xFFFF\x6\x20\x1\x23\x1\x22\x6\x23\x1\x1F\xB\x23\x4\xFFFF"+
				"\x1\x26\x1\xFFFF\x6\x24\x14\x25",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x1\x27\x11\x16\x4\xFFFF\x1\x16"+
				"\x1\xFFFF\x6\x1B\x14\x16",
				"\xA\x16\x7\xFFFF\x4\x16\x1\x28\x1\x16\x1\x29\x4\x16\x1\x2A\x6\x16\x1"+
				"\x2B\x7\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x3\x16\x1\x2D\x16\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\xA\x16\x7\xFFFF\x14\x16\x1\x2F\x5\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\xA\x16\x7\xFFFF\x11\x16\x1\x30\x8\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\xA\x16\x7\xFFFF\x3\x16\x1\x31\x1\x33\xD\x16\x1\x32\x7\x16\x4\xFFFF"+
				"\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x13\x16\x1\x34\x1\x35\x5\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x1A\x16",
				"\xA\x16\x7\xFFFF\x3\x16\x1\x36\x4\x16\x1\x37\x11\x16\x4\xFFFF\x1\x16"+
				"\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x3\x16\x1\x38\xA\x16\x1\x39\xB\x16\x4\xFFFF\x1\x16"+
				"\x1\xFFFF\x1A\x16",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x10\x16\x1\x3A\x1\x16\x4\xFFFF"+
				"\x1\x16\x1\xFFFF\x6\x1B\x14\x16",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x1B\x14\x16",
				"\xA\x3D\x7\xFFFF\x6\x3C\x14\x23\x4\xFFFF\x1\x26\x1\xFFFF\x6\x3E\x14"+
				"\x25",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x1B\x14\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x14\x7\xFFFF\x6\x14\x1\xFFFF\x1\x3F\x18\xFFFF\x6\x14",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"",
				"\x1\x41",
				"",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x1B\x14\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x1B\x14\x16",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x1B\x14\x16",
				"\xA\x1C\x7\xFFFF\x3\x19\x1\x42\x2\x19\x1\x16\x1\x1A\x12\x16\x4\xFFFF"+
				"\x1\x16\x1\xFFFF\x6\x1B\x14\x16",
				"\x1\x43",
				"\xA\x49\x7\xFFFF\x6\x45\x6\x47\x1\x44\xD\x47\x4\xFFFF\x1\x4A\x1\xFFFF"+
				"\x6\x46\x14\x48",
				"\xA\x4E\x7\xFFFF\x6\x4B\x1\x47\x1\x4D\x12\x47\x4\xFFFF\x1\x4A\x1\xFFFF"+
				"\x6\x4C\x14\x48",
				"\xA\x21\x7\xFFFF\x6\x4F\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x50\x14\x16",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x4E\x7\xFFFF\x6\x4B\x1\x47\x1\x4D\x12\x47\x4\xFFFF\x1\x4A\x1\xFFFF"+
				"\x6\x4C\x14\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\x1\x52\x3\xFFFF\x1\x51",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"",
				"\x1\x57\x1\xFFFF\x1\x58\x8\xFFFF\x1\x59\xB\xFFFF\x1\x5A",
				"",
				"\x1\x5B",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E\x1\xFFFF\x1\x5F\x8\xFFFF\x1\x60\x6\xFFFF\x1\x61\x4\xFFFF\x1"+
				"\x62",
				"\x1\x63",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x64",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x65",
				"\x1\x66",
				"",
				"\xA\x69\x7\xFFFF\x6\x67\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x68\x14"+
				"\x48",
				"\xA\x3D\x7\xFFFF\x6\x6A\x14\x16\x4\xFFFF\x1\x16\x1\xFFFF\x6\x6B\x14"+
				"\x16",
				"\xA\x69\x7\xFFFF\x6\x67\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x68\x14"+
				"\x48",
				"",
				"",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x1C\x7\xFFFF\x6\x19\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x1B\x14\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x49\x7\xFFFF\x6\x45\x9\x47\x1\x6D\xA\x47\x4\xFFFF\x1\x4A\x1\xFFFF"+
				"\x6\x46\x14\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x4E\x7\xFFFF\x6\x4B\x1\x47\x1\x4D\x12\x47\x4\xFFFF\x1\x4A\x1\xFFFF"+
				"\x6\x4C\x14\x48",
				"\xA\x4E\x7\xFFFF\x6\x4B\x1\x47\x1\x4D\x12\x47\x4\xFFFF\x1\x4A\x1\xFFFF"+
				"\x6\x4C\x14\x48",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\xA\x4E\x7\xFFFF\x6\x4B\x1\x47\x1\x4D\x12\x47\x4\xFFFF\x1\x4A\x1\xFFFF"+
				"\x6\x4C\x14\x48",
				"\xA\x21\x7\xFFFF\x6\x4F\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x50\x14\x16",
				"\xA\x21\x7\xFFFF\x6\x4F\x1\x16\x1\x1A\x12\x16\x4\xFFFF\x1\x16\x1\xFFFF"+
				"\x6\x50\x14\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x6E",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x6F",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x70",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x71",
				"\x1\x72\x14\xFFFF\x1\x73",
				"\xA\x16\x7\xFFFF\x11\x16\x1\x74\x8\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x75",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x76",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x77",
				"\x1\x78",
				"\xA\x69\x7\xFFFF\x6\x67\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x68\x14"+
				"\x48",
				"\xA\x69\x7\xFFFF\x6\x67\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x68\x14"+
				"\x48",
				"\xA\x69\x7\xFFFF\x6\x67\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x68\x14"+
				"\x48",
				"\xA\x3D\x7\xFFFF\x6\x6A\x14\x16\x4\xFFFF\x1\x16\x1\xFFFF\x6\x6B\x14"+
				"\x16",
				"\xA\x3D\x7\xFFFF\x6\x6A\x14\x16\x4\xFFFF\x1\x16\x1\xFFFF\x6\x6B\x14"+
				"\x16",
				"",
				"\xA\x49\x7\xFFFF\x6\x45\x14\x47\x4\xFFFF\x1\x4A\x1\xFFFF\x6\x46\x14"+
				"\x48",
				"\x1\x79",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x7B",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x7C",
				"",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x7E",
				"",
				"\x1\x7F",
				"\x1\x80",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__15 | T__16 | T__17 | OPERACION | TIPODIRECTIVA | OPDIRECTIVA | REGISTRO | DIRECCION | START | DIR | MAYUSCULAS | MINUSCULAS | NUMERO | NOMBRE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
