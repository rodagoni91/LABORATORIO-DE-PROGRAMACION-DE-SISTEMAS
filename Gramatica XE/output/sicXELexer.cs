//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: null
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR null C:\\Users\\dany_\\Desktop\\sicXE.g 2020-11-25 21:28:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "null")]
[System.CLSCompliant(false)]
public partial class sicXELexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int DIR=4;
	public const int DOS=5;
	public const int INT=6;
	public const int NOMBRE=7;
	public const int NOTACION=8;
	public const int OPERACIONDIRECTIVA=9;
	public const int START=10;
	public const int TIPODIRECTIVA=11;
	public const int TRES_CUATRO=12;
	public const int UNO=13;

    // delegates
    // delegators

	public sicXELexer()
	{
		OnCreated();
	}

	public sicXELexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public sicXELexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\dany_\\Desktop\\sicXE.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__14() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__14() {}

    // $ANTLR start "T__14"
    [GrammarRule("T__14")]
    private void mT__14()
    {
    	EnterRule_T__14();
    	EnterRule("T__14", 1);
    	TraceIn("T__14", 1);
    		try
    		{
    		int _type = T__14;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:7:7: ( '+ ' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:7:9: '+ '
    		{
    		DebugLocation(7, 9);
    		Match("+ "); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__14", 1);
    		LeaveRule("T__14", 1);
    		LeaveRule_T__14();
        }
    }
    // $ANTLR end "T__14"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 2);
    	TraceIn("T__15", 2);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:8:7: ( ',X' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:8:9: ',X'
    		{
    		DebugLocation(8, 9);
    		Match(",X"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 2);
    		LeaveRule("T__15", 2);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__16() {}

    // $ANTLR start "T__16"
    [GrammarRule("T__16")]
    private void mT__16()
    {
    	EnterRule_T__16();
    	EnterRule("T__16", 3);
    	TraceIn("T__16", 3);
    		try
    		{
    		int _type = T__16;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:9:7: ( 'END' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:9:9: 'END'
    		{
    		DebugLocation(9, 9);
    		Match("END"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__16", 3);
    		LeaveRule("T__16", 3);
    		LeaveRule_T__16();
        }
    }
    // $ANTLR end "T__16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 4);
    	TraceIn("T__17", 4);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:10:7: ( '\\n' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:10:9: '\\n'
    		{
    		DebugLocation(10, 9);
    		Match('\n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 4);
    		LeaveRule("T__17", 4);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNO() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNO() {}

    // $ANTLR start "UNO"
    [GrammarRule("UNO")]
    private void mUNO()
    {
    	EnterRule_UNO();
    	EnterRule("UNO", 5);
    	TraceIn("UNO", 5);
    		try
    		{
    		int _type = UNO;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:16:5: ( 'FIX' | 'FLOAT' | 'HIO' | 'NORM' | 'SIO' | 'TIO' )
    		int alt1=6;
    		try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    		switch (input.LA(1))
    		{
    		case 'F':
    			{
    			int LA1_2 = input.LA(2);

    			if ((LA1_2=='I'))
    			{
    				alt1 = 1;
    			}
    			else if ((LA1_2=='L'))
    			{
    				alt1 = 2;
    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		case 'H':
    			{
    			alt1 = 3;
    			}
    			break;
    		case 'N':
    			{
    			alt1 = 4;
    			}
    			break;
    		case 'S':
    			{
    			alt1 = 5;
    			}
    			break;
    		case 'T':
    			{
    			alt1 = 6;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(1); }
    		switch (alt1)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:16:7: 'FIX'
    			{
    			DebugLocation(16, 7);
    			Match("FIX"); 


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:16:15: 'FLOAT'
    			{
    			DebugLocation(16, 15);
    			Match("FLOAT"); 


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:16:25: 'HIO'
    			{
    			DebugLocation(16, 25);
    			Match("HIO"); 


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:16:33: 'NORM'
    			{
    			DebugLocation(16, 33);
    			Match("NORM"); 


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:16:42: 'SIO'
    			{
    			DebugLocation(16, 42);
    			Match("SIO"); 


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:16:50: 'TIO'
    			{
    			DebugLocation(16, 50);
    			Match("TIO"); 


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("UNO", 5);
    		LeaveRule("UNO", 5);
    		LeaveRule_UNO();
        }
    }
    // $ANTLR end "UNO"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DOS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DOS() {}

    // $ANTLR start "DOS"
    [GrammarRule("DOS")]
    private void mDOS()
    {
    	EnterRule_DOS();
    	EnterRule("DOS", 6);
    	TraceIn("DOS", 6);
    		try
    		{
    		int _type = DOS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:18:6: ( 'CLEAR' | 'ADDR' | 'COMPR' | 'DIVR' | 'MULR' | 'SHIFTL' | 'SHIFTR' | 'SUBR' | 'SVC' | 'TIXR' )
    		int alt2=10;
    		try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    		switch (input.LA(1))
    		{
    		case 'C':
    			{
    			int LA2_2 = input.LA(2);

    			if ((LA2_2=='L'))
    			{
    				alt2 = 1;
    			}
    			else if ((LA2_2=='O'))
    			{
    				alt2 = 3;
    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 2, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		case 'A':
    			{
    			alt2 = 2;
    			}
    			break;
    		case 'D':
    			{
    			alt2 = 4;
    			}
    			break;
    		case 'M':
    			{
    			alt2 = 5;
    			}
    			break;
    		case 'S':
    			{
    			switch (input.LA(2))
    			{
    			case 'H':
    				{
    				int LA2_3 = input.LA(3);

    				if ((LA2_3=='I'))
    				{
    					int LA2_4 = input.LA(4);

    					if ((LA2_4=='F'))
    					{
    						int LA2_5 = input.LA(5);

    						if ((LA2_5=='T'))
    						{
    							int LA2_6 = input.LA(6);

    							if ((LA2_6=='L'))
    							{
    								alt2 = 6;
    							}
    							else if ((LA2_6=='R'))
    							{
    								alt2 = 7;
    							}

    							else
    							{
    								NoViableAltException nvae = new NoViableAltException("", 2, 14, input, 6);
    								DebugRecognitionException(nvae);
    								throw nvae;
    							}

    						}

    						else
    						{
    							NoViableAltException nvae = new NoViableAltException("", 2, 13, input, 5);
    							DebugRecognitionException(nvae);
    							throw nvae;
    						}

    					}

    					else
    					{
    						NoViableAltException nvae = new NoViableAltException("", 2, 12, input, 4);
    						DebugRecognitionException(nvae);
    						throw nvae;
    					}

    				}

    				else
    				{
    					NoViableAltException nvae = new NoViableAltException("", 2, 9, input, 3);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}

    				}
    				break;
    			case 'U':
    				{
    				alt2 = 8;
    				}
    				break;
    			case 'V':
    				{
    				alt2 = 9;
    				}
    				break;
    			default:
    				{
    					NoViableAltException nvae = new NoViableAltException("", 2, 5, input, 2);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    			}
    			break;
    		case 'T':
    			{
    			alt2 = 10;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(2); }
    		switch (alt2)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:8: 'CLEAR'
    			{
    			DebugLocation(18, 8);
    			Match("CLEAR"); 


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:18: 'ADDR'
    			{
    			DebugLocation(18, 18);
    			Match("ADDR"); 


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:27: 'COMPR'
    			{
    			DebugLocation(18, 27);
    			Match("COMPR"); 


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:37: 'DIVR'
    			{
    			DebugLocation(18, 37);
    			Match("DIVR"); 


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:46: 'MULR'
    			{
    			DebugLocation(18, 46);
    			Match("MULR"); 


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:55: 'SHIFTL'
    			{
    			DebugLocation(18, 55);
    			Match("SHIFTL"); 


    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:66: 'SHIFTR'
    			{
    			DebugLocation(18, 66);
    			Match("SHIFTR"); 


    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:77: 'SUBR'
    			{
    			DebugLocation(18, 77);
    			Match("SUBR"); 


    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:86: 'SVC'
    			{
    			DebugLocation(18, 86);
    			Match("SVC"); 


    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:18:94: 'TIXR'
    			{
    			DebugLocation(18, 94);
    			Match("TIXR"); 


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DOS", 6);
    		LeaveRule("DOS", 6);
    		LeaveRule_DOS();
        }
    }
    // $ANTLR end "DOS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TRES_CUATRO() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TRES_CUATRO() {}

    // $ANTLR start "TRES_CUATRO"
    [GrammarRule("TRES_CUATRO")]
    private void mTRES_CUATRO()
    {
    	EnterRule_TRES_CUATRO();
    	EnterRule("TRES_CUATRO", 7);
    	TraceIn("TRES_CUATRO", 7);
    		try
    		{
    		int _type = TRES_CUATRO;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:20:13: ( 'ADD' | 'ADDF' | 'AND' | 'COMP' | 'COMPRF' | 'DIV' | 'DIVF' | 'J' | 'JEQ' | 'JGT' | 'JLT' | 'JSUB' | 'LDA' | 'LDB' | 'LDCH' | 'LDF' | 'LDL' | 'LDS' | 'LDT' | 'LDX' | 'LPS' | 'MUL' | 'MULF' | 'OR' | 'RD' | 'RSUB' | 'SSK' | 'STA' | 'STB' | 'STCH' | 'STF' | 'STI' | 'STL' | 'STS' | 'STSW' | 'STT' | 'STX' | 'SUB' | 'SUBF' | 'TD' | 'TIX' | 'WD' )
    		int alt3=42;
    		try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    		try
    		{
    			alt3 = dfa3.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(3); }
    		switch (alt3)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:15: 'ADD'
    			{
    			DebugLocation(20, 15);
    			Match("ADD"); 


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:23: 'ADDF'
    			{
    			DebugLocation(20, 23);
    			Match("ADDF"); 


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:32: 'AND'
    			{
    			DebugLocation(20, 32);
    			Match("AND"); 


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:40: 'COMP'
    			{
    			DebugLocation(20, 40);
    			Match("COMP"); 


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:49: 'COMPRF'
    			{
    			DebugLocation(20, 49);
    			Match("COMPRF"); 


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:60: 'DIV'
    			{
    			DebugLocation(20, 60);
    			Match("DIV"); 


    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:68: 'DIVF'
    			{
    			DebugLocation(20, 68);
    			Match("DIVF"); 


    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:77: 'J'
    			{
    			DebugLocation(20, 77);
    			Match('J'); 

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:83: 'JEQ'
    			{
    			DebugLocation(20, 83);
    			Match("JEQ"); 


    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:91: 'JGT'
    			{
    			DebugLocation(20, 91);
    			Match("JGT"); 


    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:99: 'JLT'
    			{
    			DebugLocation(20, 99);
    			Match("JLT"); 


    			}
    			break;
    		case 12:
    			DebugEnterAlt(12);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:107: 'JSUB'
    			{
    			DebugLocation(20, 107);
    			Match("JSUB"); 


    			}
    			break;
    		case 13:
    			DebugEnterAlt(13);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:116: 'LDA'
    			{
    			DebugLocation(20, 116);
    			Match("LDA"); 


    			}
    			break;
    		case 14:
    			DebugEnterAlt(14);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:124: 'LDB'
    			{
    			DebugLocation(20, 124);
    			Match("LDB"); 


    			}
    			break;
    		case 15:
    			DebugEnterAlt(15);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:132: 'LDCH'
    			{
    			DebugLocation(20, 132);
    			Match("LDCH"); 


    			}
    			break;
    		case 16:
    			DebugEnterAlt(16);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:141: 'LDF'
    			{
    			DebugLocation(20, 141);
    			Match("LDF"); 


    			}
    			break;
    		case 17:
    			DebugEnterAlt(17);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:149: 'LDL'
    			{
    			DebugLocation(20, 149);
    			Match("LDL"); 


    			}
    			break;
    		case 18:
    			DebugEnterAlt(18);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:157: 'LDS'
    			{
    			DebugLocation(20, 157);
    			Match("LDS"); 


    			}
    			break;
    		case 19:
    			DebugEnterAlt(19);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:165: 'LDT'
    			{
    			DebugLocation(20, 165);
    			Match("LDT"); 


    			}
    			break;
    		case 20:
    			DebugEnterAlt(20);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:172: 'LDX'
    			{
    			DebugLocation(20, 172);
    			Match("LDX"); 


    			}
    			break;
    		case 21:
    			DebugEnterAlt(21);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:180: 'LPS'
    			{
    			DebugLocation(20, 180);
    			Match("LPS"); 


    			}
    			break;
    		case 22:
    			DebugEnterAlt(22);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:187: 'MUL'
    			{
    			DebugLocation(20, 187);
    			Match("MUL"); 


    			}
    			break;
    		case 23:
    			DebugEnterAlt(23);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:195: 'MULF'
    			{
    			DebugLocation(20, 195);
    			Match("MULF"); 


    			}
    			break;
    		case 24:
    			DebugEnterAlt(24);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:204: 'OR'
    			{
    			DebugLocation(20, 204);
    			Match("OR"); 


    			}
    			break;
    		case 25:
    			DebugEnterAlt(25);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:211: 'RD'
    			{
    			DebugLocation(20, 211);
    			Match("RD"); 


    			}
    			break;
    		case 26:
    			DebugEnterAlt(26);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:218: 'RSUB'
    			{
    			DebugLocation(20, 218);
    			Match("RSUB"); 


    			}
    			break;
    		case 27:
    			DebugEnterAlt(27);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:226: 'SSK'
    			{
    			DebugLocation(20, 226);
    			Match("SSK"); 


    			}
    			break;
    		case 28:
    			DebugEnterAlt(28);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:233: 'STA'
    			{
    			DebugLocation(20, 233);
    			Match("STA"); 


    			}
    			break;
    		case 29:
    			DebugEnterAlt(29);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:241: 'STB'
    			{
    			DebugLocation(20, 241);
    			Match("STB"); 


    			}
    			break;
    		case 30:
    			DebugEnterAlt(30);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:249: 'STCH'
    			{
    			DebugLocation(20, 249);
    			Match("STCH"); 


    			}
    			break;
    		case 31:
    			DebugEnterAlt(31);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:258: 'STF'
    			{
    			DebugLocation(20, 258);
    			Match("STF"); 


    			}
    			break;
    		case 32:
    			DebugEnterAlt(32);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:265: 'STI'
    			{
    			DebugLocation(20, 265);
    			Match("STI"); 


    			}
    			break;
    		case 33:
    			DebugEnterAlt(33);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:272: 'STL'
    			{
    			DebugLocation(20, 272);
    			Match("STL"); 


    			}
    			break;
    		case 34:
    			DebugEnterAlt(34);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:280: 'STS'
    			{
    			DebugLocation(20, 280);
    			Match("STS"); 


    			}
    			break;
    		case 35:
    			DebugEnterAlt(35);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:288: 'STSW'
    			{
    			DebugLocation(20, 288);
    			Match("STSW"); 


    			}
    			break;
    		case 36:
    			DebugEnterAlt(36);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:297: 'STT'
    			{
    			DebugLocation(20, 297);
    			Match("STT"); 


    			}
    			break;
    		case 37:
    			DebugEnterAlt(37);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:305: 'STX'
    			{
    			DebugLocation(20, 305);
    			Match("STX"); 


    			}
    			break;
    		case 38:
    			DebugEnterAlt(38);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:313: 'SUB'
    			{
    			DebugLocation(20, 313);
    			Match("SUB"); 


    			}
    			break;
    		case 39:
    			DebugEnterAlt(39);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:321: 'SUBF'
    			{
    			DebugLocation(20, 321);
    			Match("SUBF"); 


    			}
    			break;
    		case 40:
    			DebugEnterAlt(40);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:330: 'TD'
    			{
    			DebugLocation(20, 330);
    			Match("TD"); 


    			}
    			break;
    		case 41:
    			DebugEnterAlt(41);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:337: 'TIX'
    			{
    			DebugLocation(20, 337);
    			Match("TIX"); 


    			}
    			break;
    		case 42:
    			DebugEnterAlt(42);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:20:344: 'WD'
    			{
    			DebugLocation(20, 344);
    			Match("WD"); 


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TRES_CUATRO", 7);
    		LeaveRule("TRES_CUATRO", 7);
    		LeaveRule_TRES_CUATRO();
        }
    }
    // $ANTLR end "TRES_CUATRO"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NOTACION() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NOTACION() {}

    // $ANTLR start "NOTACION"
    [GrammarRule("NOTACION")]
    private void mNOTACION()
    {
    	EnterRule_NOTACION();
    	EnterRule("NOTACION", 8);
    	TraceIn("NOTACION", 8);
    		try
    		{
    		int _type = NOTACION;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:23:10: ( '@' | '#' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:
    		{
    		DebugLocation(23, 10);
    		if (input.LA(1)=='#'||input.LA(1)=='@')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NOTACION", 8);
    		LeaveRule("NOTACION", 8);
    		LeaveRule_NOTACION();
        }
    }
    // $ANTLR end "NOTACION"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TIPODIRECTIVA() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TIPODIRECTIVA() {}

    // $ANTLR start "TIPODIRECTIVA"
    [GrammarRule("TIPODIRECTIVA")]
    private void mTIPODIRECTIVA()
    {
    	EnterRule_TIPODIRECTIVA();
    	EnterRule("TIPODIRECTIVA", 9);
    	TraceIn("TIPODIRECTIVA", 9);
    		try
    		{
    		int _type = TIPODIRECTIVA;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:27:2: ( 'BYTE' | 'WORD' | 'RESB' | 'RESW' | 'BASE' | 'USE' | 'EQU' )
    		int alt4=7;
    		try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    		switch (input.LA(1))
    		{
    		case 'B':
    			{
    			int LA4_2 = input.LA(2);

    			if ((LA4_2=='Y'))
    			{
    				alt4 = 1;
    			}
    			else if ((LA4_2=='A'))
    			{
    				alt4 = 5;
    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 4, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		case 'W':
    			{
    			alt4 = 2;
    			}
    			break;
    		case 'R':
    			{
    			int LA4_2 = input.LA(2);

    			if ((LA4_2=='E'))
    			{
    				int LA4_3 = input.LA(3);

    				if ((LA4_3=='S'))
    				{
    					int LA4_4 = input.LA(4);

    					if ((LA4_4=='B'))
    					{
    						alt4 = 3;
    					}
    					else if ((LA4_4=='W'))
    					{
    						alt4 = 4;
    					}

    					else
    					{
    						NoViableAltException nvae = new NoViableAltException("", 4, 9, input, 4);
    						DebugRecognitionException(nvae);
    						throw nvae;
    					}

    				}

    				else
    				{
    					NoViableAltException nvae = new NoViableAltException("", 4, 8, input, 3);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}

    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 4, 3, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		case 'U':
    			{
    			alt4 = 6;
    			}
    			break;
    		case 'E':
    			{
    			alt4 = 7;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(4); }
    		switch (alt4)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:27:4: 'BYTE'
    			{
    			DebugLocation(27, 4);
    			Match("BYTE"); 


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:27:13: 'WORD'
    			{
    			DebugLocation(27, 13);
    			Match("WORD"); 


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:27:22: 'RESB'
    			{
    			DebugLocation(27, 22);
    			Match("RESB"); 


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:27:31: 'RESW'
    			{
    			DebugLocation(27, 31);
    			Match("RESW"); 


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:27:40: 'BASE'
    			{
    			DebugLocation(27, 40);
    			Match("BASE"); 


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:27:49: 'USE'
    			{
    			DebugLocation(27, 49);
    			Match("USE"); 


    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:27:57: 'EQU'
    			{
    			DebugLocation(27, 57);
    			Match("EQU"); 


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TIPODIRECTIVA", 9);
    		LeaveRule("TIPODIRECTIVA", 9);
    		LeaveRule_TIPODIRECTIVA();
        }
    }
    // $ANTLR end "TIPODIRECTIVA"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OPERACIONDIRECTIVA() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OPERACIONDIRECTIVA() {}

    // $ANTLR start "OPERACIONDIRECTIVA"
    [GrammarRule("OPERACIONDIRECTIVA")]
    private void mOPERACIONDIRECTIVA()
    {
    	EnterRule_OPERACIONDIRECTIVA();
    	EnterRule("OPERACIONDIRECTIVA", 10);
    	TraceIn("OPERACIONDIRECTIVA", 10);
    		try
    		{
    		int _type = OPERACIONDIRECTIVA;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:31:2: ( 'C' '\\'' NOMBRE '\\'' | 'X' '\\'' INT '\\'' )
    		int alt5=2;
    		try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    		int LA5_1 = input.LA(1);

    		if ((LA5_1=='C'))
    		{
    			alt5 = 1;
    		}
    		else if ((LA5_1=='X'))
    		{
    			alt5 = 2;
    		}

    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}

    		} finally { DebugExitDecision(5); }
    		switch (alt5)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:31:4: 'C' '\\'' NOMBRE '\\''
    			{
    			DebugLocation(31, 4);
    			Match('C'); 
    			DebugLocation(31, 7);
    			Match('\''); 
    			DebugLocation(31, 11);
    			mNOMBRE(); 
    			DebugLocation(31, 17);
    			Match('\''); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:31:24: 'X' '\\'' INT '\\''
    			{
    			DebugLocation(31, 24);
    			Match('X'); 
    			DebugLocation(31, 27);
    			Match('\''); 
    			DebugLocation(31, 31);
    			mINT(); 
    			DebugLocation(31, 34);
    			Match('\''); 

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OPERACIONDIRECTIVA", 10);
    		LeaveRule("OPERACIONDIRECTIVA", 10);
    		LeaveRule_OPERACIONDIRECTIVA();
        }
    }
    // $ANTLR end "OPERACIONDIRECTIVA"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_START() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_START() {}

    // $ANTLR start "START"
    [GrammarRule("START")]
    private void mSTART()
    {
    	EnterRule_START();
    	EnterRule("START", 11);
    	TraceIn("START", 11);
    		try
    		{
    		int _type = START;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:33:7: ( 'START' )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:33:9: 'START'
    		{
    		DebugLocation(33, 9);
    		Match("START"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("START", 11);
    		LeaveRule("START", 11);
    		LeaveRule_START();
        }
    }
    // $ANTLR end "START"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 12);
    	TraceIn("INT", 12);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:34:5: ( ( 'A' .. 'F' | '0' .. '9' | 'a' .. 'f' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:34:8: ( 'A' .. 'F' | '0' .. '9' | 'a' .. 'f' )+
    		{
    		DebugLocation(34, 8);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:34:8: ( 'A' .. 'F' | '0' .. '9' | 'a' .. 'f' )+
    		int cnt6=0;
    		try { DebugEnterSubRule(6);
    		while (true)
    		{
    			int alt6=2;
    			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    			int LA6_1 = input.LA(1);

    			if (((LA6_1>='0' && LA6_1<='9')||(LA6_1>='A' && LA6_1<='F')||(LA6_1>='a' && LA6_1<='f')))
    			{
    				alt6 = 1;
    			}


    			} finally { DebugExitDecision(6); }
    			switch (alt6)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\dany_\\Desktop\\sicXE.g:
    				{
    				DebugLocation(34, 8);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt6 >= 1)
    					goto loop6;

    				EarlyExitException eee6 = new EarlyExitException( 6, input );
    				DebugRecognitionException(eee6);
    				throw eee6;
    			}
    			cnt6++;
    		}
    		loop6:
    			;

    		} finally { DebugExitSubRule(6); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 12);
    		LeaveRule("INT", 12);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NOMBRE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NOMBRE() {}

    // $ANTLR start "NOMBRE"
    [GrammarRule("NOMBRE")]
    private void mNOMBRE()
    {
    	EnterRule_NOMBRE();
    	EnterRule("NOMBRE", 13);
    	TraceIn("NOMBRE", 13);
    		try
    		{
    		int _type = NOMBRE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:35:8: ( ( 'A' .. 'Z' | 'a' .. 'z' | '_' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:35:10: ( 'A' .. 'Z' | 'a' .. 'z' | '_' )+
    		{
    		DebugLocation(35, 10);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:35:10: ( 'A' .. 'Z' | 'a' .. 'z' | '_' )+
    		int cnt7=0;
    		try { DebugEnterSubRule(7);
    		while (true)
    		{
    			int alt7=2;
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_1 = input.LA(1);

    			if (((LA7_1>='A' && LA7_1<='Z')||LA7_1=='_'||(LA7_1>='a' && LA7_1<='z')))
    			{
    				alt7 = 1;
    			}


    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\dany_\\Desktop\\sicXE.g:
    				{
    				DebugLocation(35, 10);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt7 >= 1)
    					goto loop7;

    				EarlyExitException eee7 = new EarlyExitException( 7, input );
    				DebugRecognitionException(eee7);
    				throw eee7;
    			}
    			cnt7++;
    		}
    		loop7:
    			;

    		} finally { DebugExitSubRule(7); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NOMBRE", 13);
    		LeaveRule("NOMBRE", 13);
    		LeaveRule_NOMBRE();
        }
    }
    // $ANTLR end "NOMBRE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIR() {}

    // $ANTLR start "DIR"
    [GrammarRule("DIR")]
    private void mDIR()
    {
    	EnterRule_DIR();
    	EnterRule("DIR", 14);
    	TraceIn("DIR", 14);
    		try
    		{
    		int _type = DIR;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:36:5: ( INT ( 'H' )? )
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:36:7: INT ( 'H' )?
    		{
    		DebugLocation(36, 7);
    		mINT(); 
    		DebugLocation(36, 10);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:36:10: ( 'H' )?
    		int alt8=2;
    		try { DebugEnterSubRule(8);
    		try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    		int LA8_1 = input.LA(1);

    		if ((LA8_1=='H'))
    		{
    			alt8 = 1;
    		}
    		} finally { DebugExitDecision(8); }
    		switch (alt8)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\dany_\\Desktop\\sicXE.g:36:10: 'H'
    			{
    			DebugLocation(36, 10);
    			Match('H'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(8); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DIR", 14);
    		LeaveRule("DIR", 14);
    		LeaveRule_DIR();
        }
    }
    // $ANTLR end "DIR"

    public override void mTokens()
    {
    	// C:\\Users\\dany_\\Desktop\\sicXE.g:1:8: ( T__14 | T__15 | T__16 | T__17 | UNO | DOS | TRES_CUATRO | NOTACION | TIPODIRECTIVA | OPERACIONDIRECTIVA | START | INT | NOMBRE | DIR )
    	int alt9=14;
    	try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    	try
    	{
    		alt9 = dfa9.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(9); }
    	switch (alt9)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:10: T__14
    		{
    		DebugLocation(1, 10);
    		mT__14(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:16: T__15
    		{
    		DebugLocation(1, 16);
    		mT__15(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:22: T__16
    		{
    		DebugLocation(1, 22);
    		mT__16(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:28: T__17
    		{
    		DebugLocation(1, 28);
    		mT__17(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:34: UNO
    		{
    		DebugLocation(1, 34);
    		mUNO(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:38: DOS
    		{
    		DebugLocation(1, 38);
    		mDOS(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:42: TRES_CUATRO
    		{
    		DebugLocation(1, 42);
    		mTRES_CUATRO(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:54: NOTACION
    		{
    		DebugLocation(1, 54);
    		mNOTACION(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:63: TIPODIRECTIVA
    		{
    		DebugLocation(1, 63);
    		mTIPODIRECTIVA(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:77: OPERACIONDIRECTIVA
    		{
    		DebugLocation(1, 77);
    		mOPERACIONDIRECTIVA(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:96: START
    		{
    		DebugLocation(1, 96);
    		mSTART(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:102: INT
    		{
    		DebugLocation(1, 102);
    		mINT(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:106: NOMBRE
    		{
    		DebugLocation(1, 106);
    		mNOMBRE(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// C:\\Users\\dany_\\Desktop\\sicXE.g:1:113: DIR
    		{
    		DebugLocation(1, 113);
    		mDIR(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA3 dfa3;
	DFA9 dfa9;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3(this);
		dfa9 = new DFA9(this);
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF\x1\x14\x1A\xFFFF\x1\x36\x1\xFFFF\x1\x39\x8\xFFFF\x1\x3B\x6"+
			"\xFFFF\x1\x3D\x2\xFFFF\x1\x3F\x2\xFFFF\x1\x41\xA\xFFFF";
		private const string DFA3_eofS =
			"\x42\xFFFF";
		private const string DFA3_minS =
			"\x1\x41\x1\x44\x1\x4F\x1\x49\x1\x45\x1\x44\x1\x55\x1\xFFFF\x1\x44\x1"+
			"\x53\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1\x4D\x1\x56\x5\xFFFF\x1\x41\x1"+
			"\xFFFF\x1\x4C\x3\xFFFF\x1\x41\x1\x42\x2\xFFFF\x1\x46\x1\x50\x1\x46\x8"+
			"\xFFFF\x1\x46\x6\xFFFF\x1\x57\x2\xFFFF\x1\x46\x2\xFFFF\x1\x52\xA\xFFFF";
		private const string DFA3_maxS =
			"\x1\x57\x1\x4E\x1\x4F\x1\x49\x1\x53\x1\x50\x1\x55\x1\xFFFF\x1\x53\x1"+
			"\x55\x1\x49\x1\xFFFF\x1\x44\x1\xFFFF\x1\x4D\x1\x56\x5\xFFFF\x1\x58\x1"+
			"\xFFFF\x1\x4C\x3\xFFFF\x1\x58\x1\x42\x2\xFFFF\x1\x46\x1\x50\x1\x46\x8"+
			"\xFFFF\x1\x46\x6\xFFFF\x1\x57\x2\xFFFF\x1\x46\x2\xFFFF\x1\x52\xA\xFFFF";
		private const string DFA3_acceptS =
			"\x7\xFFFF\x1\x18\x3\xFFFF\x1\x2A\x1\xFFFF\x1\x3\x2\xFFFF\x1\x9\x1\xA"+
			"\x1\xB\x1\xC\x1\x8\x1\xFFFF\x1\x15\x1\xFFFF\x1\x19\x1\x1A\x1\x1B\x2\xFFFF"+
			"\x1\x28\x1\x29\x3\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13"+
			"\x1\x14\x1\xFFFF\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\xFFFF\x1"+
			"\x24\x1\x25\x1\xFFFF\x1\x2\x1\x1\x1\xFFFF\x1\x7\x1\x6\x1\x17\x1\x16\x1"+
			"\x23\x1\x22\x1\x27\x1\x26\x1\x5\x1\x4";
		private const string DFA3_specialS =
			"\x42\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x2\x1\x3\x5\xFFFF\x1\x4\x1\xFFFF\x1\x5\x1\x6\x1\xFFFF"+
				"\x1\x7\x2\xFFFF\x1\x8\x1\x9\x1\xA\x2\xFFFF\x1\xB",
				"\x1\xC\x9\xFFFF\x1\xD",
				"\x1\xE",
				"\x1\xF",
				"\x1\x10\x1\xFFFF\x1\x11\x4\xFFFF\x1\x12\x6\xFFFF\x1\x13",
				"\x1\x15\xB\xFFFF\x1\x16",
				"\x1\x17",
				"",
				"\x1\x18\xE\xFFFF\x1\x19",
				"\x1\x1A\x1\x1B\x1\x1C",
				"\x1\x1D\x4\xFFFF\x1\x1E",
				"",
				"\x1\x1F",
				"",
				"\x1\x20",
				"\x1\x21",
				"",
				"",
				"",
				"",
				"",
				"\x1\x22\x1\x23\x1\x24\x2\xFFFF\x1\x25\x5\xFFFF\x1\x26\x6\xFFFF\x1\x27"+
				"\x1\x28\x3\xFFFF\x1\x29",
				"",
				"\x1\x2A",
				"",
				"",
				"",
				"\x1\x2B\x1\x2C\x1\x2D\x2\xFFFF\x1\x2E\x2\xFFFF\x1\x2F\x2\xFFFF\x1\x30"+
				"\x6\xFFFF\x1\x31\x1\x32\x3\xFFFF\x1\x33",
				"\x1\x34",
				"",
				"",
				"\x1\x35",
				"\x1\x37",
				"\x1\x38",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3A",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3C",
				"",
				"",
				"\x1\x3E",
				"",
				"",
				"\x1\x40",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "20:1: TRES_CUATRO : ( 'ADD' | 'ADDF' | 'AND' | 'COMP' | 'COMPRF' | 'DIV' | 'DIVF' | 'J' | 'JEQ' | 'JGT' | 'JLT' | 'JSUB' | 'LDA' | 'LDB' | 'LDCH' | 'LDF' | 'LDL' | 'LDS' | 'LDT' | 'LDX' | 'LPS' | 'MUL' | 'MULF' | 'OR' | 'RD' | 'RSUB' | 'SSK' | 'STA' | 'STB' | 'STCH' | 'STF' | 'STI' | 'STL' | 'STS' | 'STSW' | 'STT' | 'STX' | 'SUB' | 'SUBF' | 'TD' | 'TIX' | 'WD' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x3\xFFFF\x1\x1C\x1\xFFFF\x1\x1C\x4\x19\x3\x1C\x1\x19\x1\x35\x4\x19\x1"+
			"\xFFFF\x1\x1C\x2\x19\x2\x1C\x1\xFFFF\x2\x19\x2\xFFFF\xB\x19\x1\x35\x2"+
			"\x19\x1\xFFFF\x1\x1C\x7\x19\x1\xFFFF\x2\x19\x2\x35\x2\x19\x1\x35\x2\x19"+
			"\x1\x1C\x1\x19\x1\xFFFF\x1\x71\x1\x72\x1\x73\x1\x19\x1\x73\x1\x19\x1"+
			"\x73\x1\x19\x1\x35\x1\x79\x3\x35\x1\x19\x6\x35\x1\x73\x1\x35\x2\x19\x7"+
			"\x35\x1\x19\x2\x35\x1\x19\x6\x35\x5\x19\x1\x72\x3\xFFFF\x1\x19\x1\x73"+
			"\x1\x19\x1\x79\x1\x35\x1\xFFFF\x1\x19\x2\x35\x1\x79\x1\x19\x1\x35\x1"+
			"\x79\x1\x35\x1\x79\x1\x35\x1\x79\x4\x35\x5\x72\x1\x73\x1\x19\x1\x95\x4"+
			"\x79\x1\xFFFF\x1\x35";
		private const string DFA9_eofS =
			"\x97\xFFFF";
		private const string DFA9_minS =
			"\x1\xA\x2\xFFFF\x1\x30\x1\xFFFF\x1\x30\x1\x49\x1\x4F\x1\x48\x1\x44\x1"+
			"\x27\x2\x30\x1\x55\x1\x41\x1\x44\x1\x52\x2\x44\x1\xFFFF\x1\x30\x1\x53"+
			"\x1\x27\x2\x30\x1\xFFFF\x1\x44\x1\x55\x2\xFFFF\x1\x58\x2\x4F\x1\x52\x1"+
			"\x4F\x1\x49\x1\x42\x1\x43\x1\x4B\x1\x41\x1\x4F\x1\x41\x1\x45\x1\x4D\x1"+
			"\xFFFF\x1\x30\x1\x44\x1\x56\x1\x4C\x1\x51\x2\x54\x1\x55\x1\xFFFF\x1\x41"+
			"\x1\x53\x2\x41\x1\x55\x1\x53\x1\x41\x1\x52\x1\x54\x1\x30\x1\x45\x1\xFFFF"+
			"\x5\x41\x1\x4D\x1\x41\x1\x46\x5\x41\x1\x48\x9\x41\x1\x50\x1\x30\x6\x41"+
			"\x1\x42\x2\x41\x1\x48\x6\x41\x2\x42\x1\x44\x2\x45\x1\x41\x3\xFFFF\x1"+
			"\x54\x1\x41\x1\x54\x2\x41\x1\xFFFF\x1\x54\x3\x41\x1\x52\x2\x41\x1\x30"+
			"\xD\x41\x1\x4C\x5\x41\x1\xFFFF\x1\x41";
		private const string DFA9_maxS =
			"\x1\x7A\x2\xFFFF\x1\x7A\x1\xFFFF\x1\x7A\x1\x49\x1\x4F\x1\x56\x1\x49\x3"+
			"\x7A\x1\x55\x1\x7A\x1\x50\x1\x52\x1\x53\x1\x4F\x1\xFFFF\x1\x7A\x1\x53"+
			"\x1\x27\x1\x7A\x1\x66\x1\xFFFF\x1\x44\x1\x55\x2\xFFFF\x1\x58\x2\x4F\x1"+
			"\x52\x1\x4F\x1\x49\x1\x42\x1\x43\x1\x4B\x2\x58\x1\x7A\x1\x45\x1\x4D\x1"+
			"\xFFFF\x1\x7A\x1\x44\x1\x56\x1\x4C\x1\x51\x2\x54\x1\x55\x1\xFFFF\x1\x58"+
			"\x1\x53\x2\x7A\x1\x55\x1\x53\x1\x7A\x1\x52\x1\x54\x1\x7A\x1\x45\x1\xFFFF"+
			"\x3\x7A\x1\x41\x1\x7A\x1\x4D\x1\x7A\x1\x46\x5\x7A\x1\x48\x8\x7A\x1\x41"+
			"\x1\x50\x7\x7A\x1\x42\x2\x7A\x1\x48\x6\x7A\x1\x42\x1\x57\x1\x44\x2\x45"+
			"\x1\x7A\x3\xFFFF\x1\x54\x1\x7A\x1\x54\x2\x7A\x1\xFFFF\x1\x54\x3\x7A\x1"+
			"\x52\x10\x7A\x1\x52\x5\x7A\x1\xFFFF\x1\x7A";
		private const string DFA9_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\xFFFF\x1\x4\xE\xFFFF\x1\x8\x5\xFFFF\x1\xD\x2"+
			"\xFFFF\x1\xC\x1\xD\xE\xFFFF\x1\xA\x8\xFFFF\x1\x7\xB\xFFFF\x1\xE\x2F\xFFFF"+
			"\x1\x3\x1\x9\x1\x5\x5\xFFFF\x1\x6\x1B\xFFFF\x1\xB\x1\xFFFF";
		private const string DFA9_specialS =
			"\x97\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x1\x4\x18\xFFFF\x1\x13\x7\xFFFF\x1\x1\x1\x2\x3\xFFFF\xA\x18\x6\xFFFF"+
				"\x1\x13\x1\xB\x1\x14\x1\xA\x1\xC\x1\x3\x1\x5\x1\x19\x1\x6\x1\x19\x1"+
				"\xE\x1\x19\x1\xF\x1\xD\x1\x7\x1\x10\x2\x19\x1\x11\x1\x8\x1\x9\x1\x15"+
				"\x1\x19\x1\x12\x1\x16\x2\x19\x4\xFFFF\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"",
				"",
				"\xA\x18\x7\xFFFF\x6\x17\x1\x19\x1\x1D\x5\x19\x1\x1A\x2\x19\x1\x1B\x9"+
				"\x19\x4\xFFFF\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"",
				"\xA\x18\x7\xFFFF\x6\x17\x1\x19\x1\x1D\x1\x1E\x2\x19\x1\x1F\xE\x19\x4"+
				"\xFFFF\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"\x1\x20",
				"\x1\x21",
				"\x1\x23\x1\x22\x9\xFFFF\x1\x26\x1\x27\x1\x24\x1\x25",
				"\x1\x29\x4\xFFFF\x1\x28",
				"\x1\x2C\x8\xFFFF\xA\x18\x7\xFFFF\x6\x17\x1\x19\x1\x1D\x3\x19\x1\x2A"+
				"\x2\x19\x1\x2B\xB\x19\x4\xFFFF\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"\xA\x18\x7\xFFFF\x3\x17\x1\x2D\x2\x17\x1\x19\x1\x1D\x5\x19\x1\x2E\xC"+
				"\x19\x4\xFFFF\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"\xA\x18\x7\xFFFF\x6\x17\x1\x19\x1\x1D\x1\x2F\x11\x19\x4\xFFFF\x1\x19"+
				"\x1\xFFFF\x6\x17\x14\x19",
				"\x1\x30",
				"\x4\x19\x1\x31\x1\x19\x1\x32\x4\x19\x1\x33\x6\x19\x1\x34\x7\x19\x4"+
				"\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x36\xB\xFFFF\x1\x37",
				"\x1\x38",
				"\x1\x39\x1\x3B\xD\xFFFF\x1\x3A",
				"\x1\x3C\xA\xFFFF\x1\x3D",
				"",
				"\xA\x18\x7\xFFFF\x1\x3F\x5\x17\x1\x19\x1\x1D\x10\x19\x1\x3E\x1\x19"+
				"\x4\xFFFF\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"\x1\x40",
				"\x1\x2C",
				"\xA\x18\x7\xFFFF\x6\x17\x1\x19\x1\x1D\x12\x19\x4\xFFFF\x1\x19\x1\xFFFF"+
				"\x6\x17\x14\x19",
				"\xA\x18\x7\xFFFF\x6\x18\x1\xFFFF\x1\x41\x18\xFFFF\x6\x18",
				"",
				"\x1\x42",
				"\x1\x43",
				"",
				"",
				"\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"\x1\x47",
				"\x1\x48",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D\x1\x4E\x1\x4F\x2\xFFFF\x1\x50\x2\xFFFF\x1\x51\x2\xFFFF\x1\x52"+
				"\x6\xFFFF\x1\x53\x1\x54\x3\xFFFF\x1\x55",
				"\x1\x56\x8\xFFFF\x1\x57",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x58",
				"\x1\x59",
				"",
				"\xA\x18\x7\xFFFF\x3\x17\x1\x5A\x2\x17\x1\x19\x1\x1D\x12\x19\x4\xFFFF"+
				"\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"",
				"\x1\x62\x1\x63\x1\x64\x2\xFFFF\x1\x65\x5\xFFFF\x1\x66\x6\xFFFF\x1\x67"+
				"\x1\x68\x3\xFFFF\x1\x69",
				"\x1\x6A",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x6B",
				"\x1\x6C",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x6D",
				"\x1\x6E",
				"\xA\x18\x7\xFFFF\x6\x17\x1\x19\x1\x1D\xA\x19\x1\x6F\x7\x19\x4\xFFFF"+
				"\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"\x1\x70",
				"",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x74",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x75",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x76",
				"\x5\x19\x1\x78\xB\x19\x1\x77\x8\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x11\x19\x1\x7A\x8\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x7B",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x16\x19\x1\x7C\x3\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x11\x19\x1\x7D\x8\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x7E",
				"\x1\x7F",
				"\xA\x18\x7\xFFFF\x5\x17\x1\x81\x1\x19\x1\x1D\x9\x19\x1\x80\x8\x19\x4"+
				"\xFFFF\x1\x19\x1\xFFFF\x6\x17\x14\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x5\x19\x1\x83\xB\x19\x1\x82\x8\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x5\x19\x1\x85\xB\x19\x1\x84\x8\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x86",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x87",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x88",
				"\x1\x89\x14\xFFFF\x1\x8A",
				"\x1\x8B",
				"\x1\x8C",
				"\x1\x8D",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"",
				"",
				"",
				"\x1\x8E",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x8F",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"",
				"\x1\x90",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x91",
				"\x11\x19\x1\x92\x8\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\xA\x18\x7\xFFFF\x6\x17\x1\x19\x1\x1D\x12\x19\x4\xFFFF\x1\x19\x1\xFFFF"+
				"\x6\x17\x14\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1\x93\x5\xFFFF\x1\x94",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x5\x19\x1\x96\x14\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19",
				"",
				"\x1A\x19\x4\xFFFF\x1\x19\x1\xFFFF\x1A\x19"
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__14 | T__15 | T__16 | T__17 | UNO | DOS | TRES_CUATRO | NOTACION | TIPODIRECTIVA | OPERACIONDIRECTIVA | START | INT | NOMBRE | DIR );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
